// code generated by github.com/kubegames/protoc-gen-gin. DO NOT EDIT.

package match

//MatchService
//service_match.MatchService
//// match api service

import (
	"context"
	"fmt"
	"github.com/gin-gonic/gin"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	types "github.com/kubegames/kubegames-hall/app/service/match/types"
)

func NewMatchServiceError(code int, format string, a ...interface{}) error {
	return status.Error(codes.Code(code), fmt.Sprintf(format, a...))
}

type MatchServiceHTTPServer interface {
	Match(ctx context.Context, request *types.MatchRequest) (response *types.MatchResponse, err error)

	Ping(ctx context.Context, request *types.PingRequest) (response *types.PingResponse, err error)
}

func RegisterMatchServiceHTTPServer(r gin.IRouter, srv MatchServiceHTTPServer) {
	//init router
	s := _MatchService{
		server: srv,
		router: r,
	}
	s._RegisterService()
}

type _MatchService struct {
	server MatchServiceHTTPServer
	router gin.IRouter
}

func (s *_MatchService) Match_0(ctx *gin.Context) {
	var in types.MatchRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_MatchServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(MatchServiceHTTPServer).Match(newCtx, &in)
	if err != nil {
		_MatchServiceError(ctx, err)
		return
	}

	_MatchServiceSuccess(ctx, out)
}

func (s *_MatchService) Ping_0(ctx *gin.Context) {
	var in types.PingRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_MatchServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(MatchServiceHTTPServer).Ping(newCtx, &in)
	if err != nil {
		_MatchServiceError(ctx, err)
		return
	}

	_MatchServiceSuccess(ctx, out)
}

func (s *_MatchService) _RegisterService() {

	s.router.Handle("POST", "/match/v1/match", s.Match_0)

	s.router.Handle("POST", "/match/v1/ping", s.Ping_0)

}

func _MatchServiceError(ctx *gin.Context, err error) {
	code := 500

	msg := "unknow error"
	if err == nil {
		msg += ", err is nil"
		ctx.JSON(code, map[string]interface{}{
			"code": code,
			"msg":  msg,
			"data": nil,
		})
		return
	}

	if c, ok := status.FromError(err); ok {
		code = int(c.Code())
		msg = c.Message()
	}

	//_ = ctx.Error(err)

	ctx.JSON(code, map[string]interface{}{
		"code": code,
		"msg":  msg,
		"data": nil,
	})
}

func _MatchServiceParamsError(ctx *gin.Context, err error) {
	ctx.JSON(400, map[string]interface{}{
		"code": 400,
		"msg":  err.Error(),
		"data": nil,
	})
}

func _MatchServiceSuccess(ctx *gin.Context, data interface{}) {
	ctx.JSON(200, map[string]interface{}{
		"code": 200,
		"msg":  "success",
		"data": data,
	})
}
