// code generated by github.com/kubegames/protoc-gen-gin. DO NOT EDIT.

package platform

//PlatformService
//platform_service.PlatformService
//
import (
	"context"
	"fmt"
	"github.com/gin-gonic/gin"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	types "github.com/kubegames/kubegames-hall/app/service/platform/types"
)

func NewPlatformServiceError(code int, format string, a ...interface{}) error {
	return status.Error(codes.Code(code), fmt.Sprintf(format, a...))
}

type PlatformServiceHTTPServer interface {
	AcquireRoom(ctx context.Context, request *types.AcquireRoomRequest) (response *types.AcquireRoomResponse, err error)

	ApplyRobot(ctx context.Context, request *types.ApplyRobotRequest) (response *types.ApplyRobotResponse, err error)

	Broadcast(ctx context.Context, request *types.BroadcastRequest) (response *types.BroadcastResponse, err error)

	FindRooms(ctx context.Context, request *types.FindRoomsRequest) (response *types.FindRoomsResponse, err error)

	GetRoomPool(ctx context.Context, request *types.GetRoomPoolRequest) (response *types.GetRoomPoolResponse, err error)

	PlayerLeaveGame(ctx context.Context, request *types.PlayerLeaveGameRequest) (response *types.PlayerLeaveGameResponse, err error)

	ReleaseRoom(ctx context.Context, request *types.ReleaseRoomRequest) (response *types.ReleaseRoomResponse, err error)

	RunningRoom(ctx context.Context, request *types.RunningRoomRequest) (response *types.RunningRoomResponse, err error)

	UploadPlayerRecord(ctx context.Context, request *types.UploadPlayerRecordRequest) (response *types.UploadPlayerRecordResponse, err error)

	UploadPlayerSettleInfo(ctx context.Context, request *types.UploadPlayerSettleInfoRequest) (response *types.UploadPlayerSettleInfoResponse, err error)
}

func RegisterPlatformServiceHTTPServer(r gin.IRouter, srv PlatformServiceHTTPServer) {
	//init router
	s := _PlatformService{
		server: srv,
		router: r,
	}
	s._RegisterService()
}

type _PlatformService struct {
	server PlatformServiceHTTPServer
	router gin.IRouter
}

func (s *_PlatformService) ApplyRobot_0(ctx *gin.Context) {
	var in types.ApplyRobotRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_PlatformServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlatformServiceHTTPServer).ApplyRobot(newCtx, &in)
	if err != nil {
		_PlatformServiceError(ctx, err)
		return
	}

	_PlatformServiceSuccess(ctx, out)
}

func (s *_PlatformService) PlayerLeaveGame_0(ctx *gin.Context) {
	var in types.PlayerLeaveGameRequest

	if err := ctx.ShouldBindUri(&in); err != nil {
		_PlatformServiceParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindQuery(&in); err != nil {
		_PlatformServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlatformServiceHTTPServer).PlayerLeaveGame(newCtx, &in)
	if err != nil {
		_PlatformServiceError(ctx, err)
		return
	}

	_PlatformServiceSuccess(ctx, out)
}

func (s *_PlatformService) Broadcast_0(ctx *gin.Context) {
	var in types.BroadcastRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_PlatformServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlatformServiceHTTPServer).Broadcast(newCtx, &in)
	if err != nil {
		_PlatformServiceError(ctx, err)
		return
	}

	_PlatformServiceSuccess(ctx, out)
}

func (s *_PlatformService) FindRooms_0(ctx *gin.Context) {
	var in types.FindRoomsRequest

	if err := ctx.ShouldBindUri(&in); err != nil {
		_PlatformServiceParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindQuery(&in); err != nil {
		_PlatformServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlatformServiceHTTPServer).FindRooms(newCtx, &in)
	if err != nil {
		_PlatformServiceError(ctx, err)
		return
	}

	_PlatformServiceSuccess(ctx, out)
}

func (s *_PlatformService) RunningRoom_0(ctx *gin.Context) {
	var in types.RunningRoomRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_PlatformServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlatformServiceHTTPServer).RunningRoom(newCtx, &in)
	if err != nil {
		_PlatformServiceError(ctx, err)
		return
	}

	_PlatformServiceSuccess(ctx, out)
}

func (s *_PlatformService) AcquireRoom_0(ctx *gin.Context) {
	var in types.AcquireRoomRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_PlatformServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlatformServiceHTTPServer).AcquireRoom(newCtx, &in)
	if err != nil {
		_PlatformServiceError(ctx, err)
		return
	}

	_PlatformServiceSuccess(ctx, out)
}

func (s *_PlatformService) ReleaseRoom_0(ctx *gin.Context) {
	var in types.ReleaseRoomRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_PlatformServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlatformServiceHTTPServer).ReleaseRoom(newCtx, &in)
	if err != nil {
		_PlatformServiceError(ctx, err)
		return
	}

	_PlatformServiceSuccess(ctx, out)
}

func (s *_PlatformService) UploadPlayerRecord_0(ctx *gin.Context) {
	var in types.UploadPlayerRecordRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_PlatformServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlatformServiceHTTPServer).UploadPlayerRecord(newCtx, &in)
	if err != nil {
		_PlatformServiceError(ctx, err)
		return
	}

	_PlatformServiceSuccess(ctx, out)
}

func (s *_PlatformService) UploadPlayerSettleInfo_0(ctx *gin.Context) {
	var in types.UploadPlayerSettleInfoRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_PlatformServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlatformServiceHTTPServer).UploadPlayerSettleInfo(newCtx, &in)
	if err != nil {
		_PlatformServiceError(ctx, err)
		return
	}

	_PlatformServiceSuccess(ctx, out)
}

func (s *_PlatformService) GetRoomPool_0(ctx *gin.Context) {
	var in types.GetRoomPoolRequest

	if err := ctx.ShouldBindUri(&in); err != nil {
		_PlatformServiceParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindQuery(&in); err != nil {
		_PlatformServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlatformServiceHTTPServer).GetRoomPool(newCtx, &in)
	if err != nil {
		_PlatformServiceError(ctx, err)
		return
	}

	_PlatformServiceSuccess(ctx, out)
}

func (s *_PlatformService) _RegisterService() {

	s.router.Handle("POST", "/platform/v1/apply/robot", s.ApplyRobot_0)

	s.router.Handle("DELETE", "/platform/v1/player/leave/:playerID", s.PlayerLeaveGame_0)

	s.router.Handle("POST", "/platform/v1/broadcast", s.Broadcast_0)

	s.router.Handle("GET", "/platform/v1/find/rooms/:gameID", s.FindRooms_0)

	s.router.Handle("POST", "/platform/v1/running/room", s.RunningRoom_0)

	s.router.Handle("POST", "/platform/v1/acquire/room", s.AcquireRoom_0)

	s.router.Handle("PUT", "/platform/v1/release/room", s.ReleaseRoom_0)

	s.router.Handle("POST", "/platform/v1/upload/record", s.UploadPlayerRecord_0)

	s.router.Handle("POST", "/platform/v1/upload/settle/info", s.UploadPlayerSettleInfo_0)

	s.router.Handle("GET", "/platform/v1/get/room/pool/:roomID", s.GetRoomPool_0)

}

func _PlatformServiceError(ctx *gin.Context, err error) {
	code := 500

	msg := "unknow error"
	if err == nil {
		msg += ", err is nil"
		ctx.JSON(code, map[string]interface{}{
			"code": code,
			"msg":  msg,
			"data": nil,
		})
		return
	}

	if c, ok := status.FromError(err); ok {
		code = int(c.Code())
		msg = c.Message()
	}

	//_ = ctx.Error(err)

	ctx.JSON(code, map[string]interface{}{
		"code": code,
		"msg":  msg,
		"data": nil,
	})
}

func _PlatformServiceParamsError(ctx *gin.Context, err error) {
	ctx.JSON(400, map[string]interface{}{
		"code": 400,
		"msg":  err.Error(),
		"data": nil,
	})
}

func _PlatformServiceSuccess(ctx *gin.Context, data interface{}) {
	ctx.JSON(200, map[string]interface{}{
		"code": 200,
		"msg":  "success",
		"data": data,
	})
}
