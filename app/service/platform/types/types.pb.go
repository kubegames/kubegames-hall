// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/platform/types/types.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	player "github.com/kubegames/kubegames-hall/app/model/player"
	room "github.com/kubegames/kubegames-hall/app/model/room"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//广播消息请求
type BroadcastRequest struct {
	Buff                 []byte   `protobuf:"bytes,1,opt,name=buff,proto3" json:"buff,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *BroadcastRequest) Reset()         { *m = BroadcastRequest{} }
func (m *BroadcastRequest) String() string { return proto.CompactTextString(m) }
func (*BroadcastRequest) ProtoMessage()    {}
func (*BroadcastRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{0}
}
func (m *BroadcastRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastRequest.Merge(m, src)
}
func (m *BroadcastRequest) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastRequest proto.InternalMessageInfo

//广播消息响应
type BroadcastResponse struct {
	Success              bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *BroadcastResponse) Reset()         { *m = BroadcastResponse{} }
func (m *BroadcastResponse) String() string { return proto.CompactTextString(m) }
func (*BroadcastResponse) ProtoMessage()    {}
func (*BroadcastResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{1}
}
func (m *BroadcastResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastResponse.Merge(m, src)
}
func (m *BroadcastResponse) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastResponse proto.InternalMessageInfo

//玩家离开游戏请求
type PlayerLeaveGameRequest struct {
	// 玩家 ID
	PlayerID uint32 `protobuf:"varint,1,opt,name=playerID,proto3" json:"playerID,omitempty" uri:"playerID" binding:"required"`
	// 是否是机器人
	IsRobot              bool     `protobuf:"varint,2,opt,name=isRobot,proto3" json:"isRobot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *PlayerLeaveGameRequest) Reset()         { *m = PlayerLeaveGameRequest{} }
func (m *PlayerLeaveGameRequest) String() string { return proto.CompactTextString(m) }
func (*PlayerLeaveGameRequest) ProtoMessage()    {}
func (*PlayerLeaveGameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{2}
}
func (m *PlayerLeaveGameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerLeaveGameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerLeaveGameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerLeaveGameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerLeaveGameRequest.Merge(m, src)
}
func (m *PlayerLeaveGameRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlayerLeaveGameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerLeaveGameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerLeaveGameRequest proto.InternalMessageInfo

//玩家离开游戏响应
type PlayerLeaveGameResponse struct {
	//success
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *PlayerLeaveGameResponse) Reset()         { *m = PlayerLeaveGameResponse{} }
func (m *PlayerLeaveGameResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerLeaveGameResponse) ProtoMessage()    {}
func (*PlayerLeaveGameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{3}
}
func (m *PlayerLeaveGameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerLeaveGameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerLeaveGameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerLeaveGameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerLeaveGameResponse.Merge(m, src)
}
func (m *PlayerLeaveGameResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayerLeaveGameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerLeaveGameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerLeaveGameResponse proto.InternalMessageInfo

//申请机器人请求
type ApplyRobotRequest struct {
	//进入
	Entrancerestrictions int64 `protobuf:"varint,1,opt,name=entrancerestrictions,proto3" json:"entrancerestrictions,omitempty" uri:"entrancerestrictions" binding:"required"`
	//游戏 ID
	GameID uint32 `protobuf:"varint,2,opt,name=gameID,proto3" json:"gameID,omitempty" uri:"gameID" binding:"required"`
	//房间 ID
	RoomID uint32 `protobuf:"varint,3,opt,name=roomID,proto3" json:"roomID,omitempty" uri:"roomID" binding:"required"`
	//机器人数量
	Number uint32 `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty" uri:"number" binding:"required"`
	//最大金额
	MaxBalance int64 `protobuf:"varint,5,opt,name=maxBalance,proto3" json:"maxBalance,omitempty" uri:"maxBalance" binding:"required"`
	//最小金额
	MinBalance           int64    `protobuf:"varint,6,opt,name=minBalance,proto3" json:"minBalance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *ApplyRobotRequest) Reset()         { *m = ApplyRobotRequest{} }
func (m *ApplyRobotRequest) String() string { return proto.CompactTextString(m) }
func (*ApplyRobotRequest) ProtoMessage()    {}
func (*ApplyRobotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{4}
}
func (m *ApplyRobotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyRobotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyRobotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyRobotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyRobotRequest.Merge(m, src)
}
func (m *ApplyRobotRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplyRobotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyRobotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyRobotRequest proto.InternalMessageInfo

//申请机器人响应
type ApplyRobotResponse struct {
	//游戏 ID
	GameID uint32 `protobuf:"varint,1,opt,name=gameID,proto3" json:"gameID,omitempty"`
	//房间 ID
	RoomID uint32 `protobuf:"varint,2,opt,name=roomID,proto3" json:"roomID,omitempty"`
	//机器人信息
	List                 []*RobotInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte       `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32        `json:"-" xorm:"-" gorm:"-"`
}

func (m *ApplyRobotResponse) Reset()         { *m = ApplyRobotResponse{} }
func (m *ApplyRobotResponse) String() string { return proto.CompactTextString(m) }
func (*ApplyRobotResponse) ProtoMessage()    {}
func (*ApplyRobotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{5}
}
func (m *ApplyRobotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyRobotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyRobotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyRobotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyRobotResponse.Merge(m, src)
}
func (m *ApplyRobotResponse) XXX_Size() int {
	return m.Size()
}
func (m *ApplyRobotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyRobotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyRobotResponse proto.InternalMessageInfo

//机器人信息
type RobotInfo struct {
	//匹配玩家信息
	Player *player.Player `protobuf:"bytes,3,opt,name=player,proto3" json:"player,omitempty"`
	//玩家使用 token
	Token                string   `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *RobotInfo) Reset()         { *m = RobotInfo{} }
func (m *RobotInfo) String() string { return proto.CompactTextString(m) }
func (*RobotInfo) ProtoMessage()    {}
func (*RobotInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{6}
}
func (m *RobotInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RobotInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RobotInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RobotInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotInfo.Merge(m, src)
}
func (m *RobotInfo) XXX_Size() int {
	return m.Size()
}
func (m *RobotInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RobotInfo proto.InternalMessageInfo

//查询游戏开启房间请求
type FindRoomsRequest struct {
	//游戏ID
	GameID               uint32   `protobuf:"varint,1,opt,name=gameID,proto3" json:"gameID,omitempty" uri:"gameID" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *FindRoomsRequest) Reset()         { *m = FindRoomsRequest{} }
func (m *FindRoomsRequest) String() string { return proto.CompactTextString(m) }
func (*FindRoomsRequest) ProtoMessage()    {}
func (*FindRoomsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{7}
}
func (m *FindRoomsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindRoomsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindRoomsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindRoomsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRoomsRequest.Merge(m, src)
}
func (m *FindRoomsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindRoomsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRoomsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindRoomsRequest proto.InternalMessageInfo

//查询游戏开启房间响应
type FindRoomsResponse struct {
	Rooms                []*room.Room `protobuf:"bytes,1,rep,name=Rooms,proto3" json:"Rooms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte       `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32        `json:"-" xorm:"-" gorm:"-"`
}

func (m *FindRoomsResponse) Reset()         { *m = FindRoomsResponse{} }
func (m *FindRoomsResponse) String() string { return proto.CompactTextString(m) }
func (*FindRoomsResponse) ProtoMessage()    {}
func (*FindRoomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{8}
}
func (m *FindRoomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindRoomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindRoomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindRoomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRoomsResponse.Merge(m, src)
}
func (m *FindRoomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindRoomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRoomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindRoomsResponse proto.InternalMessageInfo

//运行房间请求
type RunningRoomRequest struct {
	//房间ID
	RoomID uint32 `protobuf:"varint,1,opt,name=roomID,proto3" json:"roomID,omitempty" uri:"roomID" binding:"required"`
	//ip
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *RunningRoomRequest) Reset()         { *m = RunningRoomRequest{} }
func (m *RunningRoomRequest) String() string { return proto.CompactTextString(m) }
func (*RunningRoomRequest) ProtoMessage()    {}
func (*RunningRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{9}
}
func (m *RunningRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunningRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunningRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunningRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunningRoomRequest.Merge(m, src)
}
func (m *RunningRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *RunningRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunningRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunningRoomRequest proto.InternalMessageInfo

//运行房间响应
type RunningRoomResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *RunningRoomResponse) Reset()         { *m = RunningRoomResponse{} }
func (m *RunningRoomResponse) String() string { return proto.CompactTextString(m) }
func (*RunningRoomResponse) ProtoMessage()    {}
func (*RunningRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{10}
}
func (m *RunningRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunningRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunningRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunningRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunningRoomResponse.Merge(m, src)
}
func (m *RunningRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *RunningRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunningRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunningRoomResponse proto.InternalMessageInfo

//抢占房间请求
type AcquireRoomRequest struct {
	//房间ID
	RoomID uint32 `protobuf:"varint,1,opt,name=roomID,proto3" json:"roomID,omitempty" uri:"roomID" binding:"required"`
	//ip
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty" uri:"ip" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *AcquireRoomRequest) Reset()         { *m = AcquireRoomRequest{} }
func (m *AcquireRoomRequest) String() string { return proto.CompactTextString(m) }
func (*AcquireRoomRequest) ProtoMessage()    {}
func (*AcquireRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{11}
}
func (m *AcquireRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcquireRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcquireRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcquireRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcquireRoomRequest.Merge(m, src)
}
func (m *AcquireRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *AcquireRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcquireRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcquireRoomRequest proto.InternalMessageInfo

//抢占房间响应
type AcquireRoomResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *AcquireRoomResponse) Reset()         { *m = AcquireRoomResponse{} }
func (m *AcquireRoomResponse) String() string { return proto.CompactTextString(m) }
func (*AcquireRoomResponse) ProtoMessage()    {}
func (*AcquireRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{12}
}
func (m *AcquireRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcquireRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcquireRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcquireRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcquireRoomResponse.Merge(m, src)
}
func (m *AcquireRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *AcquireRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AcquireRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AcquireRoomResponse proto.InternalMessageInfo

//释放房间请求
type ReleaseRoomRequest struct {
	//房间ID
	RoomID uint32 `protobuf:"varint,1,opt,name=roomID,proto3" json:"roomID,omitempty" uri:"roomID" binding:"required"`
	//ip
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *ReleaseRoomRequest) Reset()         { *m = ReleaseRoomRequest{} }
func (m *ReleaseRoomRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseRoomRequest) ProtoMessage()    {}
func (*ReleaseRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{13}
}
func (m *ReleaseRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleaseRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleaseRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleaseRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseRoomRequest.Merge(m, src)
}
func (m *ReleaseRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReleaseRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseRoomRequest proto.InternalMessageInfo

//释放房间响应
type ReleaseRoomResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *ReleaseRoomResponse) Reset()         { *m = ReleaseRoomResponse{} }
func (m *ReleaseRoomResponse) String() string { return proto.CompactTextString(m) }
func (*ReleaseRoomResponse) ProtoMessage()    {}
func (*ReleaseRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{14}
}
func (m *ReleaseRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleaseRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleaseRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleaseRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseRoomResponse.Merge(m, src)
}
func (m *ReleaseRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReleaseRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseRoomResponse proto.InternalMessageInfo

//上传战绩
type UploadPlayerRecordRequest struct {
	//战绩
	Records              []*player.PlayerRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte                 `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32                  `json:"-" xorm:"-" gorm:"-"`
}

func (m *UploadPlayerRecordRequest) Reset()         { *m = UploadPlayerRecordRequest{} }
func (m *UploadPlayerRecordRequest) String() string { return proto.CompactTextString(m) }
func (*UploadPlayerRecordRequest) ProtoMessage()    {}
func (*UploadPlayerRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{15}
}
func (m *UploadPlayerRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadPlayerRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadPlayerRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadPlayerRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadPlayerRecordRequest.Merge(m, src)
}
func (m *UploadPlayerRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *UploadPlayerRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadPlayerRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadPlayerRecordRequest proto.InternalMessageInfo

//上传战绩
type UploadPlayerRecordResponse struct {
	//success
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *UploadPlayerRecordResponse) Reset()         { *m = UploadPlayerRecordResponse{} }
func (m *UploadPlayerRecordResponse) String() string { return proto.CompactTextString(m) }
func (*UploadPlayerRecordResponse) ProtoMessage()    {}
func (*UploadPlayerRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{16}
}
func (m *UploadPlayerRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadPlayerRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadPlayerRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadPlayerRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadPlayerRecordResponse.Merge(m, src)
}
func (m *UploadPlayerRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *UploadPlayerRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadPlayerRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadPlayerRecordResponse proto.InternalMessageInfo

//上传用户结算信息返回
type UploadPlayerSettleInfoRequest struct {
	//玩家 id
	PlayerID uint32 `protobuf:"varint,1,opt,name=playerID,proto3" json:"playerID,omitempty" uri:"playerID" binding:"required"`
	//玩家变动金币
	Balance int64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty" uri:"balance" binding:"required"`
	//玩家打码量
	Chip                 int64    `protobuf:"varint,3,opt,name=chip,proto3" json:"chip,omitempty" uri:"chip" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *UploadPlayerSettleInfoRequest) Reset()         { *m = UploadPlayerSettleInfoRequest{} }
func (m *UploadPlayerSettleInfoRequest) String() string { return proto.CompactTextString(m) }
func (*UploadPlayerSettleInfoRequest) ProtoMessage()    {}
func (*UploadPlayerSettleInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{17}
}
func (m *UploadPlayerSettleInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadPlayerSettleInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadPlayerSettleInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadPlayerSettleInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadPlayerSettleInfoRequest.Merge(m, src)
}
func (m *UploadPlayerSettleInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *UploadPlayerSettleInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadPlayerSettleInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadPlayerSettleInfoRequest proto.InternalMessageInfo

//上传用户结算信息响应
type UploadPlayerSettleInfoResponse struct {
	//success
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *UploadPlayerSettleInfoResponse) Reset()         { *m = UploadPlayerSettleInfoResponse{} }
func (m *UploadPlayerSettleInfoResponse) String() string { return proto.CompactTextString(m) }
func (*UploadPlayerSettleInfoResponse) ProtoMessage()    {}
func (*UploadPlayerSettleInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{18}
}
func (m *UploadPlayerSettleInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadPlayerSettleInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadPlayerSettleInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadPlayerSettleInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadPlayerSettleInfoResponse.Merge(m, src)
}
func (m *UploadPlayerSettleInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *UploadPlayerSettleInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadPlayerSettleInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadPlayerSettleInfoResponse proto.InternalMessageInfo

//获取房间血池值请求
type GetRoomPoolRequest struct {
	//房间ID
	RoomID               uint32   `protobuf:"varint,1,opt,name=roomID,proto3" json:"roomID,omitempty" uri:"roomID" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *GetRoomPoolRequest) Reset()         { *m = GetRoomPoolRequest{} }
func (m *GetRoomPoolRequest) String() string { return proto.CompactTextString(m) }
func (*GetRoomPoolRequest) ProtoMessage()    {}
func (*GetRoomPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{19}
}
func (m *GetRoomPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoomPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoomPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoomPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomPoolRequest.Merge(m, src)
}
func (m *GetRoomPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRoomPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomPoolRequest proto.InternalMessageInfo

//获取房间血池值响应
type GetRoomPoolResponse struct {
	//房间ID
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *GetRoomPoolResponse) Reset()         { *m = GetRoomPoolResponse{} }
func (m *GetRoomPoolResponse) String() string { return proto.CompactTextString(m) }
func (*GetRoomPoolResponse) ProtoMessage()    {}
func (*GetRoomPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_652a70b7c0d7d93e, []int{20}
}
func (m *GetRoomPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoomPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoomPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoomPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomPoolResponse.Merge(m, src)
}
func (m *GetRoomPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRoomPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomPoolResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BroadcastRequest)(nil), "platform_types.BroadcastRequest")
	proto.RegisterType((*BroadcastResponse)(nil), "platform_types.BroadcastResponse")
	proto.RegisterType((*PlayerLeaveGameRequest)(nil), "platform_types.PlayerLeaveGameRequest")
	proto.RegisterType((*PlayerLeaveGameResponse)(nil), "platform_types.PlayerLeaveGameResponse")
	proto.RegisterType((*ApplyRobotRequest)(nil), "platform_types.ApplyRobotRequest")
	proto.RegisterType((*ApplyRobotResponse)(nil), "platform_types.ApplyRobotResponse")
	proto.RegisterType((*RobotInfo)(nil), "platform_types.RobotInfo")
	proto.RegisterType((*FindRoomsRequest)(nil), "platform_types.FindRoomsRequest")
	proto.RegisterType((*FindRoomsResponse)(nil), "platform_types.FindRoomsResponse")
	proto.RegisterType((*RunningRoomRequest)(nil), "platform_types.RunningRoomRequest")
	proto.RegisterType((*RunningRoomResponse)(nil), "platform_types.RunningRoomResponse")
	proto.RegisterType((*AcquireRoomRequest)(nil), "platform_types.AcquireRoomRequest")
	proto.RegisterType((*AcquireRoomResponse)(nil), "platform_types.AcquireRoomResponse")
	proto.RegisterType((*ReleaseRoomRequest)(nil), "platform_types.ReleaseRoomRequest")
	proto.RegisterType((*ReleaseRoomResponse)(nil), "platform_types.ReleaseRoomResponse")
	proto.RegisterType((*UploadPlayerRecordRequest)(nil), "platform_types.UploadPlayerRecordRequest")
	proto.RegisterType((*UploadPlayerRecordResponse)(nil), "platform_types.UploadPlayerRecordResponse")
	proto.RegisterType((*UploadPlayerSettleInfoRequest)(nil), "platform_types.UploadPlayerSettleInfoRequest")
	proto.RegisterType((*UploadPlayerSettleInfoResponse)(nil), "platform_types.UploadPlayerSettleInfoResponse")
	proto.RegisterType((*GetRoomPoolRequest)(nil), "platform_types.GetRoomPoolRequest")
	proto.RegisterType((*GetRoomPoolResponse)(nil), "platform_types.GetRoomPoolResponse")
}

func init() {
	proto.RegisterFile("app/service/platform/types/types.proto", fileDescriptor_652a70b7c0d7d93e)
}

var fileDescriptor_652a70b7c0d7d93e = []byte{
	// 843 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0x93, 0xdd, 0x6c, 0xf7, 0x94, 0xa2, 0x5d, 0x37, 0x0a, 0xde, 0xa0, 0xb5, 0xd3, 0x29,
	0x84, 0x95, 0x20, 0xb1, 0x68, 0x81, 0x8b, 0x5d, 0xa9, 0xd2, 0x5a, 0x2b, 0x56, 0x91, 0x90, 0x5a,
	0x8c, 0xb8, 0x41, 0x48, 0x95, 0xed, 0x4c, 0xb2, 0xa3, 0xda, 0x1e, 0xd7, 0x63, 0xaf, 0xc8, 0x2d,
	0x4f, 0x81, 0x78, 0x02, 0x1e, 0xa5, 0x97, 0xdc, 0x72, 0x63, 0xb5, 0xe1, 0x0d, 0xfc, 0x04, 0xc8,
	0x67, 0xec, 0xc4, 0x69, 0x5d, 0x42, 0xa5, 0x95, 0xb8, 0x49, 0x3c, 0xe7, 0x9c, 0xef, 0x9b, 0x6f,
	0xce, 0xcf, 0xd8, 0x30, 0x74, 0xa2, 0xc8, 0x14, 0x34, 0xbe, 0x66, 0x1e, 0x35, 0x23, 0xdf, 0x49,
	0x66, 0x3c, 0x0e, 0xcc, 0x64, 0x11, 0x51, 0x21, 0x7f, 0xc7, 0x51, 0xcc, 0x13, 0xae, 0x7e, 0x58,
	0xf9, 0x9e, 0xa1, 0xb5, 0x3f, 0x28, 0x70, 0x3e, 0x73, 0xcd, 0x39, 0x9f, 0x73, 0x13, 0x63, 0xdc,
	0x74, 0x86, 0x2b, 0x89, 0xe8, 0x1f, 0x17, 0x11, 0x01, 0x9f, 0x52, 0xbf, 0xe0, 0x5d, 0xd0, 0xb8,
	0xfc, 0x2b, 0xdd, 0x47, 0x6b, 0x77, 0xcc, 0x79, 0x80, 0x3f, 0xd2, 0x45, 0x86, 0x70, 0x60, 0xc5,
	0xdc, 0x99, 0x7a, 0x8e, 0x48, 0x6c, 0xfa, 0x22, 0xa5, 0x22, 0x51, 0x55, 0xd8, 0x71, 0xd3, 0xd9,
	0x4c, 0x53, 0x06, 0xca, 0xc9, 0x07, 0x36, 0x3e, 0x93, 0x11, 0x1c, 0xd6, 0xe2, 0x44, 0xc4, 0x43,
	0x41, 0x55, 0x0d, 0xf6, 0x44, 0xea, 0x79, 0x54, 0x08, 0xad, 0x35, 0x50, 0x4e, 0x6e, 0xdb, 0xd5,
	0x92, 0xa4, 0xd0, 0x7b, 0x8a, 0x0a, 0xbe, 0xa3, 0xce, 0x35, 0xbd, 0x74, 0x02, 0x5a, 0x91, 0x9f,
	0xc3, 0x6d, 0xa9, 0x6d, 0x72, 0x81, 0x1b, 0xdc, 0xb5, 0x3e, 0xcd, 0x33, 0xe3, 0x7e, 0x1a, 0xb3,
	0x53, 0x52, 0x39, 0xc8, 0xc0, 0x65, 0xe1, 0x94, 0x85, 0xf3, 0x53, 0x12, 0xd3, 0x17, 0x29, 0x8b,
	0xe9, 0x94, 0xd8, 0x2b, 0x58, 0xb1, 0x2d, 0x13, 0x36, 0x77, 0x79, 0x52, 0x6d, 0x5b, 0x2e, 0xc9,
	0x23, 0xf8, 0xe8, 0xad, 0x6d, 0xdf, 0xd6, 0xaa, 0x6c, 0x6a, 0xfd, 0xbd, 0x0d, 0x87, 0xe7, 0x51,
	0xe4, 0x2f, 0x90, 0xa3, 0xd2, 0x49, 0xa1, 0x4b, 0xc3, 0x24, 0x76, 0x42, 0x8f, 0xc6, 0x54, 0x24,
	0x31, 0xf3, 0x12, 0xc6, 0x43, 0x09, 0x6e, 0x5b, 0x5f, 0xe6, 0x99, 0x31, 0x42, 0xcd, 0x4d, 0x41,
	0x8d, 0xfa, 0x1b, 0xe9, 0xd4, 0x33, 0xe8, 0xcc, 0x9d, 0x80, 0x4e, 0x2e, 0xf0, 0x28, 0x77, 0xad,
	0x07, 0x79, 0x66, 0x18, 0x48, 0x2c, 0xcd, 0x8d, 0x54, 0x25, 0xa4, 0x00, 0x17, 0xa5, 0x9c, 0x5c,
	0x68, 0xed, 0x37, 0xc0, 0xd2, 0xdc, 0x0c, 0x96, 0xbe, 0x02, 0x1c, 0xa6, 0x81, 0x4b, 0x63, 0x6d,
	0xe7, 0x0d, 0xb0, 0x34, 0x37, 0x83, 0xa5, 0x4f, 0xbd, 0x04, 0x08, 0x9c, 0x5f, 0x2c, 0xc7, 0x2f,
	0x0e, 0xa4, 0xed, 0x62, 0x4e, 0x3e, 0xcb, 0x33, 0xe3, 0x01, 0x12, 0xac, 0x5d, 0x8d, 0x24, 0x35,
	0xa8, 0xaa, 0x03, 0x04, 0x2c, 0xac, 0x88, 0x3a, 0x05, 0x91, 0x5d, 0xb3, 0x10, 0x01, 0x6a, 0xbd,
	0x36, 0x65, 0x31, 0x7b, 0xab, 0xac, 0x61, 0x0b, 0xad, 0x12, 0xd2, 0x5b, 0x25, 0xa4, 0x25, 0xed,
	0xe5, 0x59, 0x47, 0xb0, 0xe3, 0x33, 0x91, 0x68, 0xed, 0x41, 0xfb, 0xe4, 0xce, 0xc3, 0xa3, 0xf1,
	0xe6, 0x80, 0x8d, 0x91, 0x7c, 0x12, 0xce, 0xb8, 0x8d, 0x61, 0xe4, 0x09, 0xec, 0xaf, 0x4c, 0xea,
	0x17, 0xd0, 0x91, 0x9d, 0x87, 0x49, 0xbe, 0xf3, 0xb0, 0x3b, 0xc6, 0x49, 0x7a, 0x56, 0x4e, 0x98,
	0xec, 0x37, 0xbb, 0x8c, 0x51, 0xbb, 0xb0, 0x9b, 0xf0, 0xe7, 0x34, 0xc4, 0xa4, 0xee, 0xdb, 0x72,
	0x41, 0x9e, 0xc0, 0xc1, 0xb7, 0x2c, 0x9c, 0xda, 0x9c, 0x07, 0xa2, 0x6a, 0xb0, 0xb3, 0xcd, 0x33,
	0xbc, 0x57, 0xe5, 0xc9, 0x19, 0x1c, 0xd6, 0x08, 0xcb, 0xac, 0x0c, 0x61, 0x17, 0x0d, 0x9a, 0x82,
	0xc7, 0x3c, 0x28, 0x85, 0xe2, 0xb4, 0x17, 0x0e, 0x5b, 0xba, 0xc9, 0x02, 0x54, 0x3b, 0x0d, 0x43,
	0x16, 0xce, 0xd1, 0xba, 0xd6, 0x53, 0xe6, 0x4e, 0x79, 0xff, 0x66, 0x1a, 0x42, 0x8b, 0x45, 0x98,
	0xf4, 0x7d, 0xab, 0x97, 0x67, 0x86, 0xda, 0x10, 0xdb, 0x62, 0x11, 0x31, 0xe1, 0xde, 0xc6, 0xd6,
	0x5b, 0x87, 0xf3, 0x57, 0x05, 0xd4, 0x73, 0x0f, 0x29, 0x6e, 0x4c, 0xac, 0x59, 0x13, 0x6b, 0xe4,
	0x99, 0xf1, 0x31, 0x02, 0x59, 0xd4, 0x08, 0x2a, 0x55, 0x6f, 0x68, 0xd8, 0xaa, 0xba, 0xc8, 0x30,
	0xf5, 0xa9, 0x23, 0xe8, 0xff, 0x92, 0xe1, 0xfa, 0xd6, 0x5b, 0xb5, 0x7e, 0x0f, 0x47, 0x3f, 0x46,
	0x3e, 0x77, 0xa6, 0x65, 0x27, 0x53, 0x8f, 0xc7, 0xd3, 0x4a, 0xf2, 0x57, 0xb0, 0x17, 0xa3, 0xa1,
	0x6a, 0xaa, 0x7e, 0x63, 0xf7, 0x4b, 0x4c, 0x15, 0x4a, 0xbe, 0x81, 0x7e, 0x13, 0xe5, 0x56, 0x29,
	0x7f, 0x29, 0x70, 0x5c, 0x07, 0xfe, 0x40, 0x93, 0xc4, 0xa7, 0x38, 0x98, 0x37, 0xf7, 0xf6, 0x78,
	0x0c, 0x7b, 0x6e, 0x79, 0xdd, 0xb4, 0xf0, 0xde, 0xfa, 0x24, 0xcf, 0x8c, 0x01, 0x32, 0xb8, 0xff,
	0x72, 0x69, 0x55, 0x20, 0xf5, 0x6b, 0xd8, 0xf1, 0xae, 0x58, 0x84, 0xb7, 0x41, 0xdb, 0xba, 0x9f,
	0x67, 0xc6, 0x31, 0x82, 0x0b, 0x63, 0x23, 0x12, 0xc3, 0xc9, 0x29, 0xe8, 0xef, 0x3a, 0xda, 0x7f,
	0x28, 0x91, 0x7a, 0x49, 0x93, 0xa2, 0x9e, 0x4f, 0x39, 0xf7, 0x6f, 0xa2, 0x9d, 0xc8, 0xe7, 0x70,
	0x6f, 0x83, 0xb2, 0xd4, 0xd0, 0x85, 0xdd, 0x6b, 0xc7, 0x4f, 0xa9, 0x7c, 0xcd, 0xd9, 0x72, 0x61,
	0xfd, 0xfc, 0xf2, 0xb5, 0x7e, 0xeb, 0xd5, 0x6b, 0x5d, 0xf9, 0x63, 0xa9, 0x2b, 0x2f, 0x97, 0xba,
	0xf2, 0xe7, 0x52, 0x57, 0x5e, 0x2d, 0x75, 0xe5, 0xb7, 0xbf, 0xf5, 0x5b, 0x3f, 0x3d, 0x9e, 0xb3,
	0xe4, 0x2a, 0x75, 0xc7, 0x1e, 0x0f, 0xcc, 0xe7, 0xa9, 0x4b, 0x8b, 0x2b, 0x4a, 0xac, 0x9f, 0x46,
	0x57, 0x8e, 0xef, 0x9b, 0xef, 0xfe, 0xf4, 0x71, 0x3b, 0xf8, 0x25, 0xf2, 0xe8, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x78, 0x29, 0xe6, 0xab, 0x1f, 0x09, 0x00, 0x00,
}

func (this *BroadcastRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BroadcastRequest)
	if !ok {
		that2, ok := that.(BroadcastRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BroadcastRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BroadcastRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BroadcastRequest but is not nil && this == nil")
	}
	if !bytes.Equal(this.Buff, that1.Buff) {
		return fmt.Errorf("Buff this(%v) Not Equal that(%v)", this.Buff, that1.Buff)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BroadcastRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BroadcastRequest)
	if !ok {
		that2, ok := that.(BroadcastRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Buff, that1.Buff) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BroadcastResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BroadcastResponse)
	if !ok {
		that2, ok := that.(BroadcastResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BroadcastResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BroadcastResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BroadcastResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BroadcastResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BroadcastResponse)
	if !ok {
		that2, ok := that.(BroadcastResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PlayerLeaveGameRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PlayerLeaveGameRequest)
	if !ok {
		that2, ok := that.(PlayerLeaveGameRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PlayerLeaveGameRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PlayerLeaveGameRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PlayerLeaveGameRequest but is not nil && this == nil")
	}
	if this.PlayerID != that1.PlayerID {
		return fmt.Errorf("PlayerID this(%v) Not Equal that(%v)", this.PlayerID, that1.PlayerID)
	}
	if this.IsRobot != that1.IsRobot {
		return fmt.Errorf("IsRobot this(%v) Not Equal that(%v)", this.IsRobot, that1.IsRobot)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PlayerLeaveGameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlayerLeaveGameRequest)
	if !ok {
		that2, ok := that.(PlayerLeaveGameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PlayerID != that1.PlayerID {
		return false
	}
	if this.IsRobot != that1.IsRobot {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PlayerLeaveGameResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PlayerLeaveGameResponse)
	if !ok {
		that2, ok := that.(PlayerLeaveGameResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PlayerLeaveGameResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PlayerLeaveGameResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PlayerLeaveGameResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PlayerLeaveGameResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlayerLeaveGameResponse)
	if !ok {
		that2, ok := that.(PlayerLeaveGameResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ApplyRobotRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ApplyRobotRequest)
	if !ok {
		that2, ok := that.(ApplyRobotRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ApplyRobotRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ApplyRobotRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ApplyRobotRequest but is not nil && this == nil")
	}
	if this.Entrancerestrictions != that1.Entrancerestrictions {
		return fmt.Errorf("Entrancerestrictions this(%v) Not Equal that(%v)", this.Entrancerestrictions, that1.Entrancerestrictions)
	}
	if this.GameID != that1.GameID {
		return fmt.Errorf("GameID this(%v) Not Equal that(%v)", this.GameID, that1.GameID)
	}
	if this.RoomID != that1.RoomID {
		return fmt.Errorf("RoomID this(%v) Not Equal that(%v)", this.RoomID, that1.RoomID)
	}
	if this.Number != that1.Number {
		return fmt.Errorf("Number this(%v) Not Equal that(%v)", this.Number, that1.Number)
	}
	if this.MaxBalance != that1.MaxBalance {
		return fmt.Errorf("MaxBalance this(%v) Not Equal that(%v)", this.MaxBalance, that1.MaxBalance)
	}
	if this.MinBalance != that1.MinBalance {
		return fmt.Errorf("MinBalance this(%v) Not Equal that(%v)", this.MinBalance, that1.MinBalance)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ApplyRobotRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplyRobotRequest)
	if !ok {
		that2, ok := that.(ApplyRobotRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Entrancerestrictions != that1.Entrancerestrictions {
		return false
	}
	if this.GameID != that1.GameID {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.MaxBalance != that1.MaxBalance {
		return false
	}
	if this.MinBalance != that1.MinBalance {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ApplyRobotResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ApplyRobotResponse)
	if !ok {
		that2, ok := that.(ApplyRobotResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ApplyRobotResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ApplyRobotResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ApplyRobotResponse but is not nil && this == nil")
	}
	if this.GameID != that1.GameID {
		return fmt.Errorf("GameID this(%v) Not Equal that(%v)", this.GameID, that1.GameID)
	}
	if this.RoomID != that1.RoomID {
		return fmt.Errorf("RoomID this(%v) Not Equal that(%v)", this.RoomID, that1.RoomID)
	}
	if len(this.List) != len(that1.List) {
		return fmt.Errorf("List this(%v) Not Equal that(%v)", len(this.List), len(that1.List))
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return fmt.Errorf("List this[%v](%v) Not Equal that[%v](%v)", i, this.List[i], i, that1.List[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ApplyRobotResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplyRobotResponse)
	if !ok {
		that2, ok := that.(ApplyRobotResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GameID != that1.GameID {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RobotInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RobotInfo)
	if !ok {
		that2, ok := that.(RobotInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RobotInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RobotInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RobotInfo but is not nil && this == nil")
	}
	if !this.Player.Equal(that1.Player) {
		return fmt.Errorf("Player this(%v) Not Equal that(%v)", this.Player, that1.Player)
	}
	if this.Token != that1.Token {
		return fmt.Errorf("Token this(%v) Not Equal that(%v)", this.Token, that1.Token)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RobotInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RobotInfo)
	if !ok {
		that2, ok := that.(RobotInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Player.Equal(that1.Player) {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FindRoomsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FindRoomsRequest)
	if !ok {
		that2, ok := that.(FindRoomsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FindRoomsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FindRoomsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FindRoomsRequest but is not nil && this == nil")
	}
	if this.GameID != that1.GameID {
		return fmt.Errorf("GameID this(%v) Not Equal that(%v)", this.GameID, that1.GameID)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FindRoomsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindRoomsRequest)
	if !ok {
		that2, ok := that.(FindRoomsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GameID != that1.GameID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FindRoomsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FindRoomsResponse)
	if !ok {
		that2, ok := that.(FindRoomsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FindRoomsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FindRoomsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FindRoomsResponse but is not nil && this == nil")
	}
	if len(this.Rooms) != len(that1.Rooms) {
		return fmt.Errorf("Rooms this(%v) Not Equal that(%v)", len(this.Rooms), len(that1.Rooms))
	}
	for i := range this.Rooms {
		if !this.Rooms[i].Equal(that1.Rooms[i]) {
			return fmt.Errorf("Rooms this[%v](%v) Not Equal that[%v](%v)", i, this.Rooms[i], i, that1.Rooms[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FindRoomsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindRoomsResponse)
	if !ok {
		that2, ok := that.(FindRoomsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rooms) != len(that1.Rooms) {
		return false
	}
	for i := range this.Rooms {
		if !this.Rooms[i].Equal(that1.Rooms[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RunningRoomRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RunningRoomRequest)
	if !ok {
		that2, ok := that.(RunningRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RunningRoomRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RunningRoomRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RunningRoomRequest but is not nil && this == nil")
	}
	if this.RoomID != that1.RoomID {
		return fmt.Errorf("RoomID this(%v) Not Equal that(%v)", this.RoomID, that1.RoomID)
	}
	if this.Ip != that1.Ip {
		return fmt.Errorf("Ip this(%v) Not Equal that(%v)", this.Ip, that1.Ip)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RunningRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RunningRoomRequest)
	if !ok {
		that2, ok := that.(RunningRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RunningRoomResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RunningRoomResponse)
	if !ok {
		that2, ok := that.(RunningRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RunningRoomResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RunningRoomResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RunningRoomResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RunningRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RunningRoomResponse)
	if !ok {
		that2, ok := that.(RunningRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AcquireRoomRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AcquireRoomRequest)
	if !ok {
		that2, ok := that.(AcquireRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AcquireRoomRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AcquireRoomRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AcquireRoomRequest but is not nil && this == nil")
	}
	if this.RoomID != that1.RoomID {
		return fmt.Errorf("RoomID this(%v) Not Equal that(%v)", this.RoomID, that1.RoomID)
	}
	if this.Ip != that1.Ip {
		return fmt.Errorf("Ip this(%v) Not Equal that(%v)", this.Ip, that1.Ip)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AcquireRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AcquireRoomRequest)
	if !ok {
		that2, ok := that.(AcquireRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AcquireRoomResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AcquireRoomResponse)
	if !ok {
		that2, ok := that.(AcquireRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AcquireRoomResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AcquireRoomResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AcquireRoomResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AcquireRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AcquireRoomResponse)
	if !ok {
		that2, ok := that.(AcquireRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ReleaseRoomRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ReleaseRoomRequest)
	if !ok {
		that2, ok := that.(ReleaseRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ReleaseRoomRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ReleaseRoomRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ReleaseRoomRequest but is not nil && this == nil")
	}
	if this.RoomID != that1.RoomID {
		return fmt.Errorf("RoomID this(%v) Not Equal that(%v)", this.RoomID, that1.RoomID)
	}
	if this.Ip != that1.Ip {
		return fmt.Errorf("Ip this(%v) Not Equal that(%v)", this.Ip, that1.Ip)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ReleaseRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReleaseRoomRequest)
	if !ok {
		that2, ok := that.(ReleaseRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ReleaseRoomResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ReleaseRoomResponse)
	if !ok {
		that2, ok := that.(ReleaseRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ReleaseRoomResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ReleaseRoomResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ReleaseRoomResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ReleaseRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReleaseRoomResponse)
	if !ok {
		that2, ok := that.(ReleaseRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UploadPlayerRecordRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UploadPlayerRecordRequest)
	if !ok {
		that2, ok := that.(UploadPlayerRecordRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UploadPlayerRecordRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UploadPlayerRecordRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UploadPlayerRecordRequest but is not nil && this == nil")
	}
	if len(this.Records) != len(that1.Records) {
		return fmt.Errorf("Records this(%v) Not Equal that(%v)", len(this.Records), len(that1.Records))
	}
	for i := range this.Records {
		if !this.Records[i].Equal(that1.Records[i]) {
			return fmt.Errorf("Records this[%v](%v) Not Equal that[%v](%v)", i, this.Records[i], i, that1.Records[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UploadPlayerRecordRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UploadPlayerRecordRequest)
	if !ok {
		that2, ok := that.(UploadPlayerRecordRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Records) != len(that1.Records) {
		return false
	}
	for i := range this.Records {
		if !this.Records[i].Equal(that1.Records[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UploadPlayerRecordResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UploadPlayerRecordResponse)
	if !ok {
		that2, ok := that.(UploadPlayerRecordResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UploadPlayerRecordResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UploadPlayerRecordResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UploadPlayerRecordResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UploadPlayerRecordResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UploadPlayerRecordResponse)
	if !ok {
		that2, ok := that.(UploadPlayerRecordResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UploadPlayerSettleInfoRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UploadPlayerSettleInfoRequest)
	if !ok {
		that2, ok := that.(UploadPlayerSettleInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UploadPlayerSettleInfoRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UploadPlayerSettleInfoRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UploadPlayerSettleInfoRequest but is not nil && this == nil")
	}
	if this.PlayerID != that1.PlayerID {
		return fmt.Errorf("PlayerID this(%v) Not Equal that(%v)", this.PlayerID, that1.PlayerID)
	}
	if this.Balance != that1.Balance {
		return fmt.Errorf("Balance this(%v) Not Equal that(%v)", this.Balance, that1.Balance)
	}
	if this.Chip != that1.Chip {
		return fmt.Errorf("Chip this(%v) Not Equal that(%v)", this.Chip, that1.Chip)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UploadPlayerSettleInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UploadPlayerSettleInfoRequest)
	if !ok {
		that2, ok := that.(UploadPlayerSettleInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PlayerID != that1.PlayerID {
		return false
	}
	if this.Balance != that1.Balance {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UploadPlayerSettleInfoResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UploadPlayerSettleInfoResponse)
	if !ok {
		that2, ok := that.(UploadPlayerSettleInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UploadPlayerSettleInfoResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UploadPlayerSettleInfoResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UploadPlayerSettleInfoResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UploadPlayerSettleInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UploadPlayerSettleInfoResponse)
	if !ok {
		that2, ok := that.(UploadPlayerSettleInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetRoomPoolRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetRoomPoolRequest)
	if !ok {
		that2, ok := that.(GetRoomPoolRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetRoomPoolRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetRoomPoolRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetRoomPoolRequest but is not nil && this == nil")
	}
	if this.RoomID != that1.RoomID {
		return fmt.Errorf("RoomID this(%v) Not Equal that(%v)", this.RoomID, that1.RoomID)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetRoomPoolRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRoomPoolRequest)
	if !ok {
		that2, ok := that.(GetRoomPoolRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetRoomPoolResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetRoomPoolResponse)
	if !ok {
		that2, ok := that.(GetRoomPoolResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetRoomPoolResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetRoomPoolResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetRoomPoolResponse but is not nil && this == nil")
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetRoomPoolResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRoomPoolResponse)
	if !ok {
		that2, ok := that.(GetRoomPoolResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *BroadcastRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buff) > 0 {
		i -= len(m.Buff)
		copy(dAtA[i:], m.Buff)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Buff)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *PlayerLeaveGameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerLeaveGameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerLeaveGameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsRobot {
		i--
		if m.IsRobot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerLeaveGameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerLeaveGameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerLeaveGameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApplyRobotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyRobotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyRobotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MinBalance != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinBalance))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxBalance != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxBalance))
		i--
		dAtA[i] = 0x28
	}
	if m.Number != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x20
	}
	if m.RoomID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x18
	}
	if m.GameID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x10
	}
	if m.Entrancerestrictions != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Entrancerestrictions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApplyRobotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyRobotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyRobotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RoomID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RobotInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RobotInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x22
	}
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *FindRoomsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindRoomsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindRoomsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GameID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FindRoomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindRoomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindRoomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rooms) > 0 {
		for iNdEx := len(m.Rooms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rooms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RunningRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunningRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunningRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if m.RoomID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RunningRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunningRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunningRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AcquireRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcquireRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcquireRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if m.RoomID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AcquireRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcquireRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcquireRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReleaseRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleaseRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleaseRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if m.RoomID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReleaseRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleaseRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleaseRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UploadPlayerRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadPlayerRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadPlayerRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UploadPlayerRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadPlayerRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadPlayerRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UploadPlayerSettleInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadPlayerSettleInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadPlayerSettleInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Chip != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Chip))
		i--
		dAtA[i] = 0x18
	}
	if m.Balance != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UploadPlayerSettleInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadPlayerSettleInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadPlayerSettleInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRoomPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoomPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoomPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoomID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRoomPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoomPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoomPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BroadcastRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buff)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BroadcastResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerLeaveGameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovTypes(uint64(m.PlayerID))
	}
	if m.IsRobot {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerLeaveGameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyRobotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entrancerestrictions != 0 {
		n += 1 + sovTypes(uint64(m.Entrancerestrictions))
	}
	if m.GameID != 0 {
		n += 1 + sovTypes(uint64(m.GameID))
	}
	if m.RoomID != 0 {
		n += 1 + sovTypes(uint64(m.RoomID))
	}
	if m.Number != 0 {
		n += 1 + sovTypes(uint64(m.Number))
	}
	if m.MaxBalance != 0 {
		n += 1 + sovTypes(uint64(m.MaxBalance))
	}
	if m.MinBalance != 0 {
		n += 1 + sovTypes(uint64(m.MinBalance))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyRobotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovTypes(uint64(m.GameID))
	}
	if m.RoomID != 0 {
		n += 1 + sovTypes(uint64(m.RoomID))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RobotInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindRoomsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovTypes(uint64(m.GameID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindRoomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RunningRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomID != 0 {
		n += 1 + sovTypes(uint64(m.RoomID))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RunningRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AcquireRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomID != 0 {
		n += 1 + sovTypes(uint64(m.RoomID))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AcquireRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReleaseRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomID != 0 {
		n += 1 + sovTypes(uint64(m.RoomID))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReleaseRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadPlayerRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadPlayerRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadPlayerSettleInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovTypes(uint64(m.PlayerID))
	}
	if m.Balance != 0 {
		n += 1 + sovTypes(uint64(m.Balance))
	}
	if m.Chip != 0 {
		n += 1 + sovTypes(uint64(m.Chip))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadPlayerSettleInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoomPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomID != 0 {
		n += 1 + sovTypes(uint64(m.RoomID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoomPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovTypes(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BroadcastRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buff", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buff = append(m.Buff[:0], dAtA[iNdEx:postIndex]...)
			if m.Buff == nil {
				m.Buff = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerLeaveGameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerLeaveGameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerLeaveGameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRobot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRobot = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerLeaveGameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerLeaveGameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerLeaveGameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyRobotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyRobotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyRobotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entrancerestrictions", wireType)
			}
			m.Entrancerestrictions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entrancerestrictions |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBalance", wireType)
			}
			m.MaxBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBalance", wireType)
			}
			m.MinBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyRobotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyRobotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyRobotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RobotInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &player.Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindRoomsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindRoomsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindRoomsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindRoomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindRoomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindRoomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, &room.Room{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunningRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunningRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunningRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunningRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunningRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunningRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcquireRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcquireRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcquireRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcquireRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcquireRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcquireRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleaseRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleaseRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleaseRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleaseRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleaseRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleaseRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadPlayerRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadPlayerRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadPlayerRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &player.PlayerRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadPlayerRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadPlayerRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadPlayerRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadPlayerSettleInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadPlayerSettleInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadPlayerSettleInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadPlayerSettleInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadPlayerSettleInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadPlayerSettleInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoomPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoomPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
