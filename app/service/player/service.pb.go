// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/player/service.proto

package player

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	types "github.com/kubegames/kubegames-hall/app/service/player/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("app/service/player/service.proto", fileDescriptor_0d622ed18adb5c5e) }

var fileDescriptor_0d622ed18adb5c5e = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0x80, 0xb3, 0xa9, 0x8a, 0x8c, 0xb4, 0xda, 0xad, 0xa2, 0x44, 0x58, 0xa7, 0xb1, 0x57, 0x45,
	0x33, 0x36, 0x42, 0x91, 0x22, 0x42, 0x7a, 0x23, 0x05, 0x03, 0x52, 0xbd, 0xea, 0x85, 0x71, 0x76,
	0x3d, 0x99, 0x1d, 0xb2, 0xd9, 0x19, 0x67, 0x27, 0xd1, 0xe8, 0x9d, 0xf8, 0x04, 0xf5, 0xc6, 0x47,
	0xe8, 0xa3, 0x14, 0xaf, 0x04, 0x5f, 0xa0, 0x89, 0x3e, 0x80, 0x8f, 0x20, 0xf3, 0xb3, 0x36, 0xda,
	0x6d, 0x6e, 0x36, 0x99, 0x73, 0xbe, 0x73, 0xbe, 0x39, 0x87, 0x5d, 0x84, 0xa9, 0x94, 0xa4, 0x00,
	0x35, 0xe6, 0x09, 0x10, 0x99, 0xd1, 0x09, 0xa8, 0xf2, 0xd8, 0x92, 0x4a, 0x68, 0x11, 0xae, 0xb8,
	0x68, 0xcf, 0x47, 0x1b, 0x1b, 0x15, 0x15, 0x7a, 0x22, 0xa1, 0x70, 0x4f, 0x57, 0xe5, 0xa8, 0x8c,
	0xc7, 0x84, 0x09, 0xc1, 0x32, 0x20, 0x54, 0x72, 0x42, 0xf3, 0x5c, 0x68, 0xaa, 0xb9, 0xc8, 0x4b,
	0x0a, 0x9f, 0x52, 0x4c, 0x10, 0x1b, 0x8b, 0x47, 0x7d, 0x7b, 0xf2, 0xc4, 0x76, 0x49, 0xd8, 0x63,
	0xd2, 0x63, 0x90, 0xf7, 0x84, 0x84, 0x9c, 0x4a, 0x3e, 0x6e, 0x13, 0x21, 0x6d, 0xb7, 0xb3, 0x9d,
	0xdb, 0xdf, 0x2e, 0xa0, 0xe5, 0xe7, 0xf6, 0x72, 0x2f, 0xdc, 0x55, 0x43, 0x8d, 0xae, 0xb8, 0xc0,
	0x33, 0xc1, 0x78, 0x1e, 0xe2, 0x96, 0x9f, 0xcb, 0xdd, 0x7a, 0x2e, 0xb5, 0x0f, 0x6f, 0x47, 0x50,
	0xe8, 0xc6, 0xfa, 0x02, 0xa2, 0x90, 0x22, 0x2f, 0xa0, 0x89, 0x0f, 0x3b, 0xf5, 0xb8, 0xf6, 0xe9,
	0xc7, 0xaf, 0x2f, 0xf5, 0x1b, 0xcd, 0x6b, 0xe5, 0x36, 0xc6, 0x5b, 0x24, 0x33, 0xd8, 0x4e, 0xb0,
	0x19, 0xa6, 0x08, 0xb9, 0xc2, 0xbd, 0xbc, 0x2f, 0xc2, 0x3b, 0x55, 0x2d, 0x4d, 0xa6, 0x74, 0xe2,
	0xf3, 0x01, 0xaf, 0xbc, 0x69, 0x6d, 0xab, 0xe1, 0xd5, 0x39, 0x1b, 0x37, 0xbd, 0x45, 0x39, 0x5f,
	0x97, 0xea, 0x24, 0xad, 0x9e, 0xcf, 0xa6, 0x16, 0xce, 0xe7, 0x09, 0x2f, 0xbb, 0x5d, 0x31, 0xda,
	0xd0, 0x10, 0x66, 0xb4, 0x8f, 0x68, 0xc5, 0xd5, 0xec, 0x43, 0x92, 0x52, 0xc5, 0x20, 0xbc, 0x5b,
	0xd5, 0xb1, 0xcc, 0x96, 0xda, 0x8d, 0xc5, 0x90, 0x37, 0x47, 0xd6, 0x7c, 0xab, 0xb9, 0x36, 0x67,
	0x56, 0x1e, 0x32, 0xf2, 0x41, 0xb9, 0xd7, 0xa7, 0x7c, 0x0c, 0xd5, 0x7b, 0x35, 0x99, 0x85, 0x7b,
	0x75, 0x80, 0x17, 0x36, 0xac, 0xf0, 0x7a, 0x73, 0x7e, 0xaf, 0x8c, 0x8f, 0x8d, 0x6c, 0xf7, 0x73,
	0xfd, 0xb0, 0x73, 0x14, 0x84, 0x04, 0xad, 0x0f, 0x46, 0x31, 0x30, 0x3a, 0x84, 0x02, 0x9b, 0x27,
	0x76, 0x28, 0xa6, 0x92, 0xe3, 0xe2, 0x1d, 0x65, 0x0c, 0xd4, 0xe6, 0x45, 0xb4, 0xd4, 0xdd, 0x7b,
	0xd9, 0x5e, 0xda, 0x6a, 0x3d, 0x38, 0x78, 0x8d, 0x5e, 0xa1, 0xe5, 0xce, 0x48, 0xa7, 0x42, 0xf1,
	0x0f, 0xf6, 0xf5, 0x0c, 0xbb, 0x97, 0xeb, 0xe1, 0x23, 0x13, 0x82, 0x5c, 0xf3, 0xc4, 0xc6, 0xb0,
	0x16, 0x03, 0xc8, 0xef, 0x61, 0xa9, 0xa0, 0xcf, 0xdf, 0xc3, 0x1b, 0x1c, 0x4f, 0xf0, 0x2e, 0x50,
	0x05, 0x6a, 0xc7, 0xff, 0xe2, 0xc7, 0x16, 0x79, 0xd2, 0xf8, 0xb7, 0x19, 0xae, 0xc7, 0x6b, 0x68,
	0xf5, 0x7f, 0x43, 0xed, 0x78, 0x1a, 0xd5, 0x4e, 0xa6, 0x51, 0xf0, 0x7b, 0x1a, 0x05, 0x47, 0xb3,
	0x28, 0x38, 0x9e, 0x45, 0xc1, 0xf7, 0x59, 0x14, 0x9c, 0xcc, 0xa2, 0xe0, 0xeb, 0xcf, 0xa8, 0x76,
	0xb0, 0xcd, 0xb8, 0x4e, 0x47, 0x71, 0x2b, 0x11, 0x43, 0xf2, 0x77, 0xa0, 0xd3, 0x7f, 0xf7, 0x53,
	0x9a, 0x65, 0xe4, 0xec, 0x57, 0x1e, 0x5f, 0xb2, 0x9f, 0xd6, 0xc3, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x60, 0x8d, 0x92, 0x7d, 0x34, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlayerServiceClient is the client API for PlayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlayerServiceClient interface {
	//玩家登录
	PlayerLogin(ctx context.Context, in *types.PlayerLoginRequest, opts ...grpc.CallOption) (*types.PlayerLoginResponse, error)
	//玩家信息
	PlayerInfo(ctx context.Context, in *types.PlayerInfoRequest, opts ...grpc.CallOption) (*types.PlayerInfoResponse, error)
	//玩家匹配
	PlayerMatch(ctx context.Context, in *types.PlayerMatchRequest, opts ...grpc.CallOption) (*types.PlayerMatchResponse, error)
	//玩家充值金币
	PlayerRecharge(ctx context.Context, in *types.PlayerRechargeRequest, opts ...grpc.CallOption) (*types.PlayerRechargeResponse, error)
	//玩家赠送金币
	PlayerGive(ctx context.Context, in *types.PlayerGiveRequest, opts ...grpc.CallOption) (*types.PlayerGiveResponse, error)
}

type playerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPlayerServiceClient(cc *grpc.ClientConn) PlayerServiceClient {
	return &playerServiceClient{cc}
}

func (c *playerServiceClient) PlayerLogin(ctx context.Context, in *types.PlayerLoginRequest, opts ...grpc.CallOption) (*types.PlayerLoginResponse, error) {
	out := new(types.PlayerLoginResponse)
	err := c.cc.Invoke(ctx, "/player_service.PlayerService/PlayerLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) PlayerInfo(ctx context.Context, in *types.PlayerInfoRequest, opts ...grpc.CallOption) (*types.PlayerInfoResponse, error) {
	out := new(types.PlayerInfoResponse)
	err := c.cc.Invoke(ctx, "/player_service.PlayerService/PlayerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) PlayerMatch(ctx context.Context, in *types.PlayerMatchRequest, opts ...grpc.CallOption) (*types.PlayerMatchResponse, error) {
	out := new(types.PlayerMatchResponse)
	err := c.cc.Invoke(ctx, "/player_service.PlayerService/PlayerMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) PlayerRecharge(ctx context.Context, in *types.PlayerRechargeRequest, opts ...grpc.CallOption) (*types.PlayerRechargeResponse, error) {
	out := new(types.PlayerRechargeResponse)
	err := c.cc.Invoke(ctx, "/player_service.PlayerService/PlayerRecharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) PlayerGive(ctx context.Context, in *types.PlayerGiveRequest, opts ...grpc.CallOption) (*types.PlayerGiveResponse, error) {
	out := new(types.PlayerGiveResponse)
	err := c.cc.Invoke(ctx, "/player_service.PlayerService/PlayerGive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServiceServer is the server API for PlayerService service.
type PlayerServiceServer interface {
	//玩家登录
	PlayerLogin(context.Context, *types.PlayerLoginRequest) (*types.PlayerLoginResponse, error)
	//玩家信息
	PlayerInfo(context.Context, *types.PlayerInfoRequest) (*types.PlayerInfoResponse, error)
	//玩家匹配
	PlayerMatch(context.Context, *types.PlayerMatchRequest) (*types.PlayerMatchResponse, error)
	//玩家充值金币
	PlayerRecharge(context.Context, *types.PlayerRechargeRequest) (*types.PlayerRechargeResponse, error)
	//玩家赠送金币
	PlayerGive(context.Context, *types.PlayerGiveRequest) (*types.PlayerGiveResponse, error)
}

// UnimplementedPlayerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPlayerServiceServer struct {
}

func (*UnimplementedPlayerServiceServer) PlayerLogin(ctx context.Context, req *types.PlayerLoginRequest) (*types.PlayerLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerLogin not implemented")
}
func (*UnimplementedPlayerServiceServer) PlayerInfo(ctx context.Context, req *types.PlayerInfoRequest) (*types.PlayerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerInfo not implemented")
}
func (*UnimplementedPlayerServiceServer) PlayerMatch(ctx context.Context, req *types.PlayerMatchRequest) (*types.PlayerMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerMatch not implemented")
}
func (*UnimplementedPlayerServiceServer) PlayerRecharge(ctx context.Context, req *types.PlayerRechargeRequest) (*types.PlayerRechargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerRecharge not implemented")
}
func (*UnimplementedPlayerServiceServer) PlayerGive(ctx context.Context, req *types.PlayerGiveRequest) (*types.PlayerGiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerGive not implemented")
}

func RegisterPlayerServiceServer(s *grpc.Server, srv PlayerServiceServer) {
	s.RegisterService(&_PlayerService_serviceDesc, srv)
}

func _PlayerService_PlayerLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.PlayerLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).PlayerLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player_service.PlayerService/PlayerLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).PlayerLogin(ctx, req.(*types.PlayerLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_PlayerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.PlayerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).PlayerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player_service.PlayerService/PlayerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).PlayerInfo(ctx, req.(*types.PlayerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_PlayerMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.PlayerMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).PlayerMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player_service.PlayerService/PlayerMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).PlayerMatch(ctx, req.(*types.PlayerMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_PlayerRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.PlayerRechargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).PlayerRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player_service.PlayerService/PlayerRecharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).PlayerRecharge(ctx, req.(*types.PlayerRechargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_PlayerGive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.PlayerGiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).PlayerGive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player_service.PlayerService/PlayerGive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).PlayerGive(ctx, req.(*types.PlayerGiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlayerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "player_service.PlayerService",
	HandlerType: (*PlayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayerLogin",
			Handler:    _PlayerService_PlayerLogin_Handler,
		},
		{
			MethodName: "PlayerInfo",
			Handler:    _PlayerService_PlayerInfo_Handler,
		},
		{
			MethodName: "PlayerMatch",
			Handler:    _PlayerService_PlayerMatch_Handler,
		},
		{
			MethodName: "PlayerRecharge",
			Handler:    _PlayerService_PlayerRecharge_Handler,
		},
		{
			MethodName: "PlayerGive",
			Handler:    _PlayerService_PlayerGive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/player/service.proto",
}
