// code generated by github.com/kubegames/protoc-gen-gin. DO NOT EDIT.

package player

//PlayerService
//player_service.PlayerService
////玩家服务

import (
	"context"
	"fmt"
	"github.com/gin-gonic/gin"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	types "github.com/kubegames/kubegames-hall/app/service/player/types"
)

func NewPlayerServiceError(code int, format string, a ...interface{}) error {
	return status.Error(codes.Code(code), fmt.Sprintf(format, a...))
}

type PlayerServiceHTTPServer interface {
	GetPhoneCode(ctx context.Context, request *types.GetPhoneCodeRequest) (response *types.GetPhoneCodeResponse, err error)

	PlayerGive(ctx context.Context, request *types.PlayerGiveRequest) (response *types.PlayerGiveResponse, err error)

	PlayerInfo(ctx context.Context, request *types.PlayerInfoRequest) (response *types.PlayerInfoResponse, err error)

	PlayerLogin(ctx context.Context, request *types.PlayerLoginRequest) (response *types.PlayerLoginResponse, err error)

	PlayerMatch(ctx context.Context, request *types.PlayerMatchRequest) (response *types.PlayerMatchResponse, err error)

	PlayerRecharge(ctx context.Context, request *types.PlayerRechargeRequest) (response *types.PlayerRechargeResponse, err error)

	PlayerRegister(ctx context.Context, request *types.PlayerRegisterRequest) (response *types.PlayerRegisterResponse, err error)
}

func RegisterPlayerServiceHTTPServer(r gin.IRouter, srv PlayerServiceHTTPServer) {
	//init router
	s := _PlayerService{
		server: srv,
		router: r,
	}
	s._RegisterService()
}

type _PlayerService struct {
	server PlayerServiceHTTPServer
	router gin.IRouter
}

func (s *_PlayerService) GetPhoneCode_0(ctx *gin.Context) {
	var in types.GetPhoneCodeRequest

	if err := ctx.ShouldBindUri(&in); err != nil {
		_PlayerServiceParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindQuery(&in); err != nil {
		_PlayerServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlayerServiceHTTPServer).GetPhoneCode(newCtx, &in)
	if err != nil {
		_PlayerServiceError(ctx, err)
		return
	}

	_PlayerServiceSuccess(ctx, out)
}

func (s *_PlayerService) PlayerRegister_0(ctx *gin.Context) {
	var in types.PlayerRegisterRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_PlayerServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlayerServiceHTTPServer).PlayerRegister(newCtx, &in)
	if err != nil {
		_PlayerServiceError(ctx, err)
		return
	}

	_PlayerServiceSuccess(ctx, out)
}

func (s *_PlayerService) PlayerLogin_0(ctx *gin.Context) {
	var in types.PlayerLoginRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_PlayerServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlayerServiceHTTPServer).PlayerLogin(newCtx, &in)
	if err != nil {
		_PlayerServiceError(ctx, err)
		return
	}

	_PlayerServiceSuccess(ctx, out)
}

func (s *_PlayerService) PlayerInfo_0(ctx *gin.Context) {
	var in types.PlayerInfoRequest

	if err := ctx.ShouldBindQuery(&in); err != nil {
		_PlayerServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlayerServiceHTTPServer).PlayerInfo(newCtx, &in)
	if err != nil {
		_PlayerServiceError(ctx, err)
		return
	}

	_PlayerServiceSuccess(ctx, out)
}

func (s *_PlayerService) PlayerMatch_0(ctx *gin.Context) {
	var in types.PlayerMatchRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_PlayerServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlayerServiceHTTPServer).PlayerMatch(newCtx, &in)
	if err != nil {
		_PlayerServiceError(ctx, err)
		return
	}

	_PlayerServiceSuccess(ctx, out)
}

func (s *_PlayerService) PlayerRecharge_0(ctx *gin.Context) {
	var in types.PlayerRechargeRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_PlayerServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlayerServiceHTTPServer).PlayerRecharge(newCtx, &in)
	if err != nil {
		_PlayerServiceError(ctx, err)
		return
	}

	_PlayerServiceSuccess(ctx, out)
}

func (s *_PlayerService) PlayerGive_0(ctx *gin.Context) {
	var in types.PlayerGiveRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_PlayerServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(PlayerServiceHTTPServer).PlayerGive(newCtx, &in)
	if err != nil {
		_PlayerServiceError(ctx, err)
		return
	}

	_PlayerServiceSuccess(ctx, out)
}

func (s *_PlayerService) _RegisterService() {

	s.router.Handle("GET", "/player/v1/phone/code/:phone", s.GetPhoneCode_0)

	s.router.Handle("POST", "/player/v1/phone/register", s.PlayerRegister_0)

	s.router.Handle("POST", "/player/v1/phone/login", s.PlayerLogin_0)

	s.router.Handle("GET", "/player/v1/info", s.PlayerInfo_0)

	s.router.Handle("POST", "/player/v1/match", s.PlayerMatch_0)

	s.router.Handle("POST", "/player/v1/recharge", s.PlayerRecharge_0)

	s.router.Handle("POST", "/player/v1/give", s.PlayerGive_0)

}

func _PlayerServiceError(ctx *gin.Context, err error) {
	code := 500

	msg := "unknow error"
	if err == nil {
		msg += ", err is nil"
		ctx.JSON(code, map[string]interface{}{
			"code": code,
			"msg":  msg,
			"data": nil,
		})
		return
	}

	if c, ok := status.FromError(err); ok {
		code = int(c.Code())
		msg = c.Message()
	}

	//_ = ctx.Error(err)

	ctx.JSON(code, map[string]interface{}{
		"code": code,
		"msg":  msg,
		"data": nil,
	})
}

func _PlayerServiceParamsError(ctx *gin.Context, err error) {
	ctx.JSON(400, map[string]interface{}{
		"code": 400,
		"msg":  err.Error(),
		"data": nil,
	})
}

func _PlayerServiceSuccess(ctx *gin.Context, data interface{}) {
	ctx.JSON(200, map[string]interface{}{
		"code": 200,
		"msg":  "success",
		"data": data,
	})
}
