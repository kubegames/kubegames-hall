// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/room/types/types.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	room "github.com/kubegames/kubegames-hall/app/model/room"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//添加业主游戏房间请求
type AddGameRoomRequest struct {
	//房间ID
	RoomID uint32 `protobuf:"varint,2,opt,name=roomID,proto3" json:"roomID,omitempty" binding:"required"`
	//游戏ID
	GameID uint32 `protobuf:"varint,3,opt,name=gameID,proto3" json:"gameID,omitempty" binding:"required"`
	//房间等级
	Level int32 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty" binding:"required"`
	//游戏房间名称
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty" binding:"required"`
	//房间明税率
	Rate uint32 `protobuf:"varint,6,opt,name=rate,proto3" json:"rate,omitempty"`
	//入场限制
	EntranceRestrictions uint32 `protobuf:"varint,7,opt,name=entranceRestrictions,proto3" json:"entranceRestrictions,omitempty"`
	//底注
	BottomNote int32 `protobuf:"varint,8,opt,name=bottomNote,proto3" json:"bottomNote,omitempty"`
	//高级配置
	AdviceConfig string `protobuf:"bytes,9,opt,name=adviceConfig,proto3" json:"adviceConfig,omitempty"`
	//点控状态
	PointStatus int32 `protobuf:"varint,10,opt,name=pointStatus,proto3" json:"pointStatus,omitempty"`
	//最大人数
	MaxPeople int32 `protobuf:"varint,11,opt,name=maxPeople,proto3" json:"maxPeople,omitempty" binding:"required"`
	//最小开赛人数
	MinPeople int32 `protobuf:"varint,12,opt,name=minPeople,proto3" json:"minPeople,omitempty"`
	//是否允许关闭
	IsAllowClose bool `protobuf:"varint,13,opt,name=isAllowClose,proto3" json:"isAllowClose,omitempty"`
	//是否开启机器人
	IsOpenAiRobot bool `protobuf:"varint,14,opt,name=isOpenAiRobot,proto3" json:"isOpenAiRobot,omitempty"`
	//是否开启跨业主匹配
	IsOpenCrossPlatformMatch bool `protobuf:"varint,15,opt,name=isOpenCrossPlatformMatch,proto3" json:"isOpenCrossPlatformMatch,omitempty"`
	//允许的平台
	AllowPlatformID []uint32 `protobuf:"varint,16,rep,packed,name=allowPlatformID,proto3" json:"allowPlatformID,omitempty"`
	//是否允许自动创建桌子
	IsAllowAutoCreateTable bool `protobuf:"varint,17,opt,name=isAllowAutoCreateTable,proto3" json:"isAllowAutoCreateTable,omitempty"`
	//机器人配置
	Robot []*room.RobotConfig `protobuf:"bytes,18,rep,name=robot,proto3" json:"robot,omitempty"`
	//最大金额
	RobotMaxBalance uint32 `protobuf:"varint,19,opt,name=robotMaxBalance,proto3" json:"robotMaxBalance,omitempty" binding:"required"`
	//最小金额
	RobotMinBalance      uint32   `protobuf:"varint,20,opt,name=robotMinBalance,proto3" json:"robotMinBalance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *AddGameRoomRequest) Reset()         { *m = AddGameRoomRequest{} }
func (m *AddGameRoomRequest) String() string { return proto.CompactTextString(m) }
func (*AddGameRoomRequest) ProtoMessage()    {}
func (*AddGameRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{0}
}
func (m *AddGameRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddGameRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddGameRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddGameRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGameRoomRequest.Merge(m, src)
}
func (m *AddGameRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddGameRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGameRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddGameRoomRequest proto.InternalMessageInfo

//添加业主游戏房间响应
type AddGameRoomResponse struct {
	//success
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *AddGameRoomResponse) Reset()         { *m = AddGameRoomResponse{} }
func (m *AddGameRoomResponse) String() string { return proto.CompactTextString(m) }
func (*AddGameRoomResponse) ProtoMessage()    {}
func (*AddGameRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{1}
}
func (m *AddGameRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddGameRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddGameRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddGameRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGameRoomResponse.Merge(m, src)
}
func (m *AddGameRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddGameRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGameRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddGameRoomResponse proto.InternalMessageInfo

//批量添加业主游戏房间请求
type AddGameRoomsRequest struct {
	Rooms                []*AddGameRoomRequest `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte                `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32                 `json:"-" xorm:"-" gorm:"-"`
}

func (m *AddGameRoomsRequest) Reset()         { *m = AddGameRoomsRequest{} }
func (m *AddGameRoomsRequest) String() string { return proto.CompactTextString(m) }
func (*AddGameRoomsRequest) ProtoMessage()    {}
func (*AddGameRoomsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{2}
}
func (m *AddGameRoomsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddGameRoomsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddGameRoomsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddGameRoomsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGameRoomsRequest.Merge(m, src)
}
func (m *AddGameRoomsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddGameRoomsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGameRoomsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddGameRoomsRequest proto.InternalMessageInfo

//批量添加业主游戏房间响应
type AddGameRoomsResponse struct {
	//success
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *AddGameRoomsResponse) Reset()         { *m = AddGameRoomsResponse{} }
func (m *AddGameRoomsResponse) String() string { return proto.CompactTextString(m) }
func (*AddGameRoomsResponse) ProtoMessage()    {}
func (*AddGameRoomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{3}
}
func (m *AddGameRoomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddGameRoomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddGameRoomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddGameRoomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGameRoomsResponse.Merge(m, src)
}
func (m *AddGameRoomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddGameRoomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGameRoomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddGameRoomsResponse proto.InternalMessageInfo

//开启游戏房间请求
type OpenGameRoomRequest struct {
	//房间ID
	RoomID               uint32   `protobuf:"varint,1,opt,name=roomID,proto3" json:"roomID,omitempty" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *OpenGameRoomRequest) Reset()         { *m = OpenGameRoomRequest{} }
func (m *OpenGameRoomRequest) String() string { return proto.CompactTextString(m) }
func (*OpenGameRoomRequest) ProtoMessage()    {}
func (*OpenGameRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{4}
}
func (m *OpenGameRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenGameRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenGameRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenGameRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenGameRoomRequest.Merge(m, src)
}
func (m *OpenGameRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *OpenGameRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenGameRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenGameRoomRequest proto.InternalMessageInfo

//开启游戏房间响应
type OpenGameRoomResponse struct {
	//success
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *OpenGameRoomResponse) Reset()         { *m = OpenGameRoomResponse{} }
func (m *OpenGameRoomResponse) String() string { return proto.CompactTextString(m) }
func (*OpenGameRoomResponse) ProtoMessage()    {}
func (*OpenGameRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{5}
}
func (m *OpenGameRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenGameRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenGameRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenGameRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenGameRoomResponse.Merge(m, src)
}
func (m *OpenGameRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *OpenGameRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenGameRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpenGameRoomResponse proto.InternalMessageInfo

//关闭游戏房间请求
type CloseGameRoomRequest struct {
	//房间ID
	RoomID               uint32   `protobuf:"varint,1,opt,name=roomID,proto3" json:"roomID,omitempty" uri:"roomID" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *CloseGameRoomRequest) Reset()         { *m = CloseGameRoomRequest{} }
func (m *CloseGameRoomRequest) String() string { return proto.CompactTextString(m) }
func (*CloseGameRoomRequest) ProtoMessage()    {}
func (*CloseGameRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{6}
}
func (m *CloseGameRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseGameRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseGameRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseGameRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseGameRoomRequest.Merge(m, src)
}
func (m *CloseGameRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *CloseGameRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseGameRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseGameRoomRequest proto.InternalMessageInfo

//关闭游戏房间响应
type CloseGameRoomResponse struct {
	//success
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *CloseGameRoomResponse) Reset()         { *m = CloseGameRoomResponse{} }
func (m *CloseGameRoomResponse) String() string { return proto.CompactTextString(m) }
func (*CloseGameRoomResponse) ProtoMessage()    {}
func (*CloseGameRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{7}
}
func (m *CloseGameRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseGameRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseGameRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseGameRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseGameRoomResponse.Merge(m, src)
}
func (m *CloseGameRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *CloseGameRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseGameRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloseGameRoomResponse proto.InternalMessageInfo

//查询房间信息请求
type FindGameRoomRequest struct {
	// 房间 ID
	RoomID               uint32   `protobuf:"varint,1,opt,name=roomID,proto3" json:"roomID,omitempty" uri:"roomID" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *FindGameRoomRequest) Reset()         { *m = FindGameRoomRequest{} }
func (m *FindGameRoomRequest) String() string { return proto.CompactTextString(m) }
func (*FindGameRoomRequest) ProtoMessage()    {}
func (*FindGameRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{8}
}
func (m *FindGameRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindGameRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindGameRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindGameRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindGameRoomRequest.Merge(m, src)
}
func (m *FindGameRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindGameRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindGameRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindGameRoomRequest proto.InternalMessageInfo

//查询房间信息响应
type FindGameRoomResponse struct {
	Room                 *room.Room `protobuf:"bytes,1,opt,name=Room,proto3" json:"Room,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte     `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32      `json:"-" xorm:"-" gorm:"-"`
}

func (m *FindGameRoomResponse) Reset()         { *m = FindGameRoomResponse{} }
func (m *FindGameRoomResponse) String() string { return proto.CompactTextString(m) }
func (*FindGameRoomResponse) ProtoMessage()    {}
func (*FindGameRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{9}
}
func (m *FindGameRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindGameRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindGameRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindGameRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindGameRoomResponse.Merge(m, src)
}
func (m *FindGameRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindGameRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindGameRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindGameRoomResponse proto.InternalMessageInfo

//查询游戏房间列表请求
type FindGameRoomsRequest struct {
	//游戏ID
	GameID uint32 `protobuf:"varint,1,opt,name=gameID,proto3" json:"gameID,omitempty" uri:"gameID" binding:"required"`
	//房间状态 0全部 1关闭 2开启
	Status               int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty" uri:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *FindGameRoomsRequest) Reset()         { *m = FindGameRoomsRequest{} }
func (m *FindGameRoomsRequest) String() string { return proto.CompactTextString(m) }
func (*FindGameRoomsRequest) ProtoMessage()    {}
func (*FindGameRoomsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{10}
}
func (m *FindGameRoomsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindGameRoomsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindGameRoomsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindGameRoomsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindGameRoomsRequest.Merge(m, src)
}
func (m *FindGameRoomsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindGameRoomsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindGameRoomsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindGameRoomsRequest proto.InternalMessageInfo

//查询游戏房间列表响应
type FindGameRoomsResponse struct {
	Rooms                []*room.Room `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte       `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32        `json:"-" xorm:"-" gorm:"-"`
}

func (m *FindGameRoomsResponse) Reset()         { *m = FindGameRoomsResponse{} }
func (m *FindGameRoomsResponse) String() string { return proto.CompactTextString(m) }
func (*FindGameRoomsResponse) ProtoMessage()    {}
func (*FindGameRoomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{11}
}
func (m *FindGameRoomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindGameRoomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindGameRoomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindGameRoomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindGameRoomsResponse.Merge(m, src)
}
func (m *FindGameRoomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindGameRoomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindGameRoomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindGameRoomsResponse proto.InternalMessageInfo

// 添加游戏房间血池
type AddGameRoomPoolsRequest struct {
	//血池名称
	Names                []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty" uri:"name" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *AddGameRoomPoolsRequest) Reset()         { *m = AddGameRoomPoolsRequest{} }
func (m *AddGameRoomPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*AddGameRoomPoolsRequest) ProtoMessage()    {}
func (*AddGameRoomPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{12}
}
func (m *AddGameRoomPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddGameRoomPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddGameRoomPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddGameRoomPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGameRoomPoolsRequest.Merge(m, src)
}
func (m *AddGameRoomPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddGameRoomPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGameRoomPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddGameRoomPoolsRequest proto.InternalMessageInfo

type AddGameRoomPoolsResponse struct {
	//success
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *AddGameRoomPoolsResponse) Reset()         { *m = AddGameRoomPoolsResponse{} }
func (m *AddGameRoomPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*AddGameRoomPoolsResponse) ProtoMessage()    {}
func (*AddGameRoomPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{13}
}
func (m *AddGameRoomPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddGameRoomPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddGameRoomPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddGameRoomPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGameRoomPoolsResponse.Merge(m, src)
}
func (m *AddGameRoomPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddGameRoomPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGameRoomPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddGameRoomPoolsResponse proto.InternalMessageInfo

//绑定游戏房间血池请求
type BindGameRoomPoolRequest struct {
	//血池 ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" uri:"id" binding:"required"`
	//房间ID
	RoomID               uint32   `protobuf:"varint,2,opt,name=roomID,proto3" json:"roomID,omitempty" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *BindGameRoomPoolRequest) Reset()         { *m = BindGameRoomPoolRequest{} }
func (m *BindGameRoomPoolRequest) String() string { return proto.CompactTextString(m) }
func (*BindGameRoomPoolRequest) ProtoMessage()    {}
func (*BindGameRoomPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{14}
}
func (m *BindGameRoomPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindGameRoomPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindGameRoomPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindGameRoomPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindGameRoomPoolRequest.Merge(m, src)
}
func (m *BindGameRoomPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *BindGameRoomPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BindGameRoomPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BindGameRoomPoolRequest proto.InternalMessageInfo

//绑定游戏房间血池响应
type BindGameRoomPoolResponse struct {
	//success
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *BindGameRoomPoolResponse) Reset()         { *m = BindGameRoomPoolResponse{} }
func (m *BindGameRoomPoolResponse) String() string { return proto.CompactTextString(m) }
func (*BindGameRoomPoolResponse) ProtoMessage()    {}
func (*BindGameRoomPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{15}
}
func (m *BindGameRoomPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindGameRoomPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindGameRoomPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindGameRoomPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindGameRoomPoolResponse.Merge(m, src)
}
func (m *BindGameRoomPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *BindGameRoomPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BindGameRoomPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BindGameRoomPoolResponse proto.InternalMessageInfo

//解绑游戏房间血池请求
type UnboundGameRoomPoolRequest struct {
	//血池 ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" uri:"id" binding:"required"`
	//房间ID
	RoomID               uint32   `protobuf:"varint,2,opt,name=roomID,proto3" json:"roomID,omitempty" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *UnboundGameRoomPoolRequest) Reset()         { *m = UnboundGameRoomPoolRequest{} }
func (m *UnboundGameRoomPoolRequest) String() string { return proto.CompactTextString(m) }
func (*UnboundGameRoomPoolRequest) ProtoMessage()    {}
func (*UnboundGameRoomPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{16}
}
func (m *UnboundGameRoomPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnboundGameRoomPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnboundGameRoomPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnboundGameRoomPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnboundGameRoomPoolRequest.Merge(m, src)
}
func (m *UnboundGameRoomPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnboundGameRoomPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnboundGameRoomPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnboundGameRoomPoolRequest proto.InternalMessageInfo

//解绑游戏房间血池响应
type UnboundGameRoomPoolResponse struct {
	//success
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *UnboundGameRoomPoolResponse) Reset()         { *m = UnboundGameRoomPoolResponse{} }
func (m *UnboundGameRoomPoolResponse) String() string { return proto.CompactTextString(m) }
func (*UnboundGameRoomPoolResponse) ProtoMessage()    {}
func (*UnboundGameRoomPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{17}
}
func (m *UnboundGameRoomPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnboundGameRoomPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnboundGameRoomPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnboundGameRoomPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnboundGameRoomPoolResponse.Merge(m, src)
}
func (m *UnboundGameRoomPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *UnboundGameRoomPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnboundGameRoomPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnboundGameRoomPoolResponse proto.InternalMessageInfo

//删除游戏房间血池请求
type DeleteGameRoomPoolRequest struct {
	//血池 ID
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" uri:"id" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *DeleteGameRoomPoolRequest) Reset()         { *m = DeleteGameRoomPoolRequest{} }
func (m *DeleteGameRoomPoolRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteGameRoomPoolRequest) ProtoMessage()    {}
func (*DeleteGameRoomPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{18}
}
func (m *DeleteGameRoomPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteGameRoomPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteGameRoomPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteGameRoomPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteGameRoomPoolRequest.Merge(m, src)
}
func (m *DeleteGameRoomPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteGameRoomPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteGameRoomPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteGameRoomPoolRequest proto.InternalMessageInfo

//删除游戏房间血池响应
type DeleteGameRoomPoolResponse struct {
	//success
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *DeleteGameRoomPoolResponse) Reset()         { *m = DeleteGameRoomPoolResponse{} }
func (m *DeleteGameRoomPoolResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteGameRoomPoolResponse) ProtoMessage()    {}
func (*DeleteGameRoomPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{19}
}
func (m *DeleteGameRoomPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteGameRoomPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteGameRoomPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteGameRoomPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteGameRoomPoolResponse.Merge(m, src)
}
func (m *DeleteGameRoomPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteGameRoomPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteGameRoomPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteGameRoomPoolResponse proto.InternalMessageInfo

//查询游戏血池列表请求
type FindGameRoomPoolsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *FindGameRoomPoolsRequest) Reset()         { *m = FindGameRoomPoolsRequest{} }
func (m *FindGameRoomPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*FindGameRoomPoolsRequest) ProtoMessage()    {}
func (*FindGameRoomPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{20}
}
func (m *FindGameRoomPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindGameRoomPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindGameRoomPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindGameRoomPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindGameRoomPoolsRequest.Merge(m, src)
}
func (m *FindGameRoomPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindGameRoomPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindGameRoomPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindGameRoomPoolsRequest proto.InternalMessageInfo

//查询游戏血池列表响应
type FindGameRoomPoolsResponse struct {
	//血池信息
	RoomPools            []*room.RoomPool `protobuf:"bytes,1,rep,name=roomPools,proto3" json:"roomPools,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte           `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32            `json:"-" xorm:"-" gorm:"-"`
}

func (m *FindGameRoomPoolsResponse) Reset()         { *m = FindGameRoomPoolsResponse{} }
func (m *FindGameRoomPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*FindGameRoomPoolsResponse) ProtoMessage()    {}
func (*FindGameRoomPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{21}
}
func (m *FindGameRoomPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindGameRoomPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindGameRoomPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindGameRoomPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindGameRoomPoolsResponse.Merge(m, src)
}
func (m *FindGameRoomPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindGameRoomPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindGameRoomPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindGameRoomPoolsResponse proto.InternalMessageInfo

//查询游戏血池请求
type FindGameRoomPoolRequest struct {
	//血池 ID
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" uri:"id" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte   `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32    `json:"-" xorm:"-" gorm:"-"`
}

func (m *FindGameRoomPoolRequest) Reset()         { *m = FindGameRoomPoolRequest{} }
func (m *FindGameRoomPoolRequest) String() string { return proto.CompactTextString(m) }
func (*FindGameRoomPoolRequest) ProtoMessage()    {}
func (*FindGameRoomPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{22}
}
func (m *FindGameRoomPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindGameRoomPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindGameRoomPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindGameRoomPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindGameRoomPoolRequest.Merge(m, src)
}
func (m *FindGameRoomPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindGameRoomPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindGameRoomPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindGameRoomPoolRequest proto.InternalMessageInfo

//查询游戏血池响应
type FindGameRoomPoolResponse struct {
	//血池信息
	RoomPool             *room.RoomPool `protobuf:"bytes,1,opt,name=roomPool,proto3" json:"roomPool,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" xorm:"-" gorm:"-"`
	XXX_unrecognized     []byte         `json:"-" xorm:"-" gorm:"-"`
	XXX_sizecache        int32          `json:"-" xorm:"-" gorm:"-"`
}

func (m *FindGameRoomPoolResponse) Reset()         { *m = FindGameRoomPoolResponse{} }
func (m *FindGameRoomPoolResponse) String() string { return proto.CompactTextString(m) }
func (*FindGameRoomPoolResponse) ProtoMessage()    {}
func (*FindGameRoomPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47e86681e46b5aeb, []int{23}
}
func (m *FindGameRoomPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindGameRoomPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindGameRoomPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindGameRoomPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindGameRoomPoolResponse.Merge(m, src)
}
func (m *FindGameRoomPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindGameRoomPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindGameRoomPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindGameRoomPoolResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AddGameRoomRequest)(nil), "room_types.AddGameRoomRequest")
	proto.RegisterType((*AddGameRoomResponse)(nil), "room_types.AddGameRoomResponse")
	proto.RegisterType((*AddGameRoomsRequest)(nil), "room_types.AddGameRoomsRequest")
	proto.RegisterType((*AddGameRoomsResponse)(nil), "room_types.AddGameRoomsResponse")
	proto.RegisterType((*OpenGameRoomRequest)(nil), "room_types.OpenGameRoomRequest")
	proto.RegisterType((*OpenGameRoomResponse)(nil), "room_types.OpenGameRoomResponse")
	proto.RegisterType((*CloseGameRoomRequest)(nil), "room_types.CloseGameRoomRequest")
	proto.RegisterType((*CloseGameRoomResponse)(nil), "room_types.CloseGameRoomResponse")
	proto.RegisterType((*FindGameRoomRequest)(nil), "room_types.FindGameRoomRequest")
	proto.RegisterType((*FindGameRoomResponse)(nil), "room_types.FindGameRoomResponse")
	proto.RegisterType((*FindGameRoomsRequest)(nil), "room_types.FindGameRoomsRequest")
	proto.RegisterType((*FindGameRoomsResponse)(nil), "room_types.FindGameRoomsResponse")
	proto.RegisterType((*AddGameRoomPoolsRequest)(nil), "room_types.AddGameRoomPoolsRequest")
	proto.RegisterType((*AddGameRoomPoolsResponse)(nil), "room_types.AddGameRoomPoolsResponse")
	proto.RegisterType((*BindGameRoomPoolRequest)(nil), "room_types.BindGameRoomPoolRequest")
	proto.RegisterType((*BindGameRoomPoolResponse)(nil), "room_types.BindGameRoomPoolResponse")
	proto.RegisterType((*UnboundGameRoomPoolRequest)(nil), "room_types.UnboundGameRoomPoolRequest")
	proto.RegisterType((*UnboundGameRoomPoolResponse)(nil), "room_types.UnboundGameRoomPoolResponse")
	proto.RegisterType((*DeleteGameRoomPoolRequest)(nil), "room_types.DeleteGameRoomPoolRequest")
	proto.RegisterType((*DeleteGameRoomPoolResponse)(nil), "room_types.DeleteGameRoomPoolResponse")
	proto.RegisterType((*FindGameRoomPoolsRequest)(nil), "room_types.FindGameRoomPoolsRequest")
	proto.RegisterType((*FindGameRoomPoolsResponse)(nil), "room_types.FindGameRoomPoolsResponse")
	proto.RegisterType((*FindGameRoomPoolRequest)(nil), "room_types.FindGameRoomPoolRequest")
	proto.RegisterType((*FindGameRoomPoolResponse)(nil), "room_types.FindGameRoomPoolResponse")
}

func init() {
	proto.RegisterFile("app/service/room/types/types.proto", fileDescriptor_47e86681e46b5aeb)
}

var fileDescriptor_47e86681e46b5aeb = []byte{
	// 930 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x96, 0x61, 0x6f, 0xdb, 0x44,
	0x18, 0xc7, 0xe7, 0xb6, 0xc9, 0x9a, 0xa7, 0x2d, 0x2d, 0xd7, 0x6c, 0xbd, 0x66, 0xe0, 0x18, 0x33,
	0xa1, 0x08, 0xb1, 0x78, 0x94, 0x6a, 0x93, 0x0a, 0x12, 0x34, 0x2d, 0x45, 0x85, 0x8d, 0x55, 0x1e,
	0x48, 0x88, 0x37, 0xd3, 0x39, 0xbe, 0xa6, 0x27, 0x6c, 0x5f, 0xe6, 0x3b, 0x8f, 0x81, 0xb4, 0xef,
	0xc1, 0x47, 0xe0, 0xa3, 0xec, 0x25, 0x12, 0xef, 0xa3, 0xb5, 0x7c, 0x83, 0x7c, 0x02, 0x74, 0x67,
	0xa7, 0x89, 0x1d, 0xa7, 0x01, 0xa9, 0xd2, 0xde, 0x44, 0xf6, 0xff, 0xf9, 0xdf, 0xf3, 0xfc, 0xce,
	0xf7, 0xf8, 0x89, 0xc1, 0x26, 0xfd, 0xbe, 0x23, 0x68, 0xfc, 0x82, 0x75, 0xa9, 0x13, 0x73, 0x1e,
	0x3a, 0xf2, 0xb7, 0x3e, 0x15, 0xe9, 0x6f, 0xbb, 0x1f, 0x73, 0xc9, 0x11, 0x28, 0xfd, 0x99, 0x56,
	0x1a, 0x96, 0xf2, 0x07, 0xcc, 0x73, 0x7a, 0xbc, 0xc7, 0x1d, 0x1d, 0xf7, 0x92, 0x53, 0x7d, 0x97,
	0xba, 0x1b, 0xdb, 0xca, 0x11, 0x72, 0x9f, 0x06, 0x69, 0x3e, 0xf5, 0x93, 0x86, 0xec, 0xbf, 0xab,
	0x80, 0xf6, 0x7d, 0xff, 0x1b, 0x12, 0x52, 0x97, 0xf3, 0xd0, 0xa5, 0xcf, 0x13, 0x2a, 0x24, 0x6a,
	0x43, 0x55, 0x99, 0x8e, 0x0f, 0xf1, 0x82, 0x65, 0xb4, 0xd6, 0x3a, 0xb7, 0x87, 0x83, 0x26, 0xf2,
	0x58, 0xe4, 0xb3, 0xa8, 0xb7, 0x67, 0xc7, 0xf4, 0x79, 0xc2, 0x62, 0xea, 0xdb, 0x6e, 0xe6, 0x52,
	0xfe, 0x1e, 0x09, 0xe9, 0xf1, 0x21, 0x5e, 0xbc, 0xda, 0x9f, 0xba, 0xd0, 0x27, 0x50, 0x09, 0xe8,
	0x0b, 0x1a, 0xe0, 0x25, 0xcb, 0x68, 0x55, 0x66, 0xda, 0x53, 0x13, 0xfa, 0x18, 0x96, 0x22, 0x12,
	0x52, 0x5c, 0xb1, 0x8c, 0x56, 0x6d, 0xa6, 0x59, 0x7b, 0x10, 0x82, 0xa5, 0x98, 0x48, 0x8a, 0xab,
	0x8a, 0xc3, 0xd5, 0xd7, 0x68, 0x07, 0xea, 0x34, 0x92, 0x31, 0x89, 0xba, 0xd4, 0xa5, 0x42, 0xc6,
	0xac, 0x2b, 0x19, 0x8f, 0x04, 0xbe, 0xa9, 0x3d, 0xa5, 0x31, 0x64, 0x02, 0x78, 0x5c, 0x4a, 0x1e,
	0x7e, 0xcf, 0x25, 0xc5, 0xcb, 0x0a, 0xd3, 0x9d, 0x50, 0x90, 0x0d, 0xab, 0xc4, 0x57, 0x47, 0x74,
	0xc0, 0xa3, 0x53, 0xd6, 0xc3, 0x35, 0xc5, 0xe6, 0xe6, 0x34, 0x64, 0xc1, 0x4a, 0x9f, 0xb3, 0x48,
	0x3e, 0x95, 0x44, 0x26, 0x02, 0x83, 0x4e, 0x32, 0x29, 0xa1, 0x5d, 0xa8, 0x85, 0xe4, 0xe5, 0x09,
	0xe5, 0xfd, 0x80, 0xe2, 0x95, 0x2b, 0x9f, 0xc5, 0xd8, 0x88, 0xde, 0x83, 0x5a, 0xc8, 0xa2, 0x6c,
	0xd5, 0xaa, 0xce, 0x3a, 0x16, 0x14, 0x19, 0x13, 0xfb, 0x41, 0xc0, 0x7f, 0x3d, 0x08, 0xb8, 0xa0,
	0x78, 0xcd, 0x32, 0x5a, 0xcb, 0x6e, 0x4e, 0x43, 0x77, 0x61, 0x8d, 0x89, 0x27, 0x7d, 0x1a, 0xed,
	0x33, 0x97, 0x7b, 0x5c, 0xe2, 0x77, 0xb4, 0x29, 0x2f, 0xa2, 0x3d, 0xc0, 0xa9, 0x70, 0x10, 0x73,
	0x21, 0x4e, 0x02, 0x22, 0x4f, 0x79, 0x1c, 0x3e, 0x26, 0xb2, 0x7b, 0x86, 0xd7, 0xf5, 0x82, 0x99,
	0x71, 0xd4, 0x82, 0x75, 0xa2, 0xea, 0x8d, 0xd4, 0xe3, 0x43, 0xbc, 0x61, 0x2d, 0xb6, 0xd6, 0xdc,
	0xa2, 0x8c, 0x1e, 0xc0, 0xed, 0x8c, 0x6d, 0x3f, 0x91, 0xfc, 0x20, 0xa6, 0x44, 0xd2, 0x1f, 0x88,
	0x17, 0x50, 0xfc, 0xae, 0xae, 0x31, 0x23, 0x8a, 0xee, 0x41, 0x25, 0xd6, 0xec, 0xc8, 0x5a, 0x6c,
	0xad, 0xec, 0x6c, 0xb5, 0x75, 0x87, 0x3f, 0xd3, 0xcd, 0xad, 0xf9, 0xd3, 0x53, 0x70, 0x53, 0x17,
	0xfa, 0x0a, 0xd6, 0xf5, 0xc5, 0x63, 0xf2, 0xb2, 0x43, 0x02, 0x75, 0xde, 0x78, 0xf3, 0xca, 0x5e,
	0x2d, 0xda, 0xd5, 0x96, 0x52, 0x89, 0x45, 0xa3, 0x0c, 0x75, 0xdd, 0x41, 0x45, 0xd9, 0x76, 0x60,
	0x33, 0xf7, 0x52, 0x89, 0x3e, 0x8f, 0x04, 0x45, 0x18, 0x6e, 0x8a, 0xa4, 0xdb, 0xa5, 0x42, 0x60,
	0x43, 0x6f, 0x6d, 0x74, 0x6b, 0x7f, 0x97, 0x5b, 0x20, 0x46, 0xaf, 0xe1, 0xae, 0xda, 0x22, 0x0f,
	0x95, 0x5d, 0x6d, 0xd1, 0x6c, 0x8f, 0x5f, 0xfb, 0xf6, 0xf4, 0x5b, 0xeb, 0xa6, 0x66, 0xfb, 0x3e,
	0xd4, 0xf3, 0xc9, 0xe6, 0x96, 0xff, 0x1a, 0x36, 0xd5, 0x31, 0xce, 0x9e, 0x02, 0xc6, 0x7f, 0x99,
	0x02, 0xaa, 0x70, 0x3e, 0xcd, 0xdc, 0xc2, 0x4f, 0xa1, 0xae, 0x1b, 0xb2, 0x58, 0xf9, 0xf3, 0x42,
	0xe5, 0x0f, 0x87, 0x83, 0x66, 0x33, 0x89, 0xd9, 0x9e, 0x9d, 0x95, 0xb2, 0xae, 0xc0, 0xf8, 0x14,
	0x6e, 0x15, 0x92, 0xce, 0xe5, 0x70, 0x61, 0xf3, 0x88, 0x45, 0xfe, 0xb5, 0x62, 0x7c, 0x01, 0xf5,
	0x7c, 0xce, 0x8c, 0xe2, 0x2e, 0x2c, 0xa9, 0x7b, 0x9d, 0x72, 0x65, 0x67, 0x23, 0xdf, 0xb6, 0x3c,
	0x74, 0x75, 0xd4, 0x7e, 0x95, 0x5f, 0x2d, 0x26, 0x90, 0xb2, 0x49, 0x5b, 0x44, 0x4a, 0xe5, 0x72,
	0xa4, 0x6c, 0xec, 0xb6, 0xa0, 0x2a, 0xd2, 0x59, 0xb4, 0xa0, 0x67, 0xcd, 0xc6, 0x70, 0xd0, 0x5c,
	0xd5, 0x8b, 0x53, 0xd9, 0x76, 0xb3, 0xb8, 0xfd, 0x25, 0xdc, 0x2a, 0x94, 0xcf, 0xe8, 0x3f, 0xca,
	0xb7, 0xe4, 0x34, 0x7e, 0xd6, 0x84, 0x2e, 0x6c, 0x4d, 0x34, 0xe1, 0x09, 0xe7, 0xc1, 0xe5, 0x16,
	0x1e, 0x42, 0x45, 0x8d, 0xea, 0x34, 0x45, 0xad, 0xf3, 0xc1, 0x70, 0xd0, 0x7c, 0x5f, 0x43, 0x28,
	0xb5, 0x94, 0x3f, 0xf5, 0xdb, 0xbb, 0x80, 0xa7, 0x73, 0xce, 0x3d, 0xdb, 0xdf, 0x61, 0xab, 0x33,
	0xb1, 0x15, 0xb5, 0x6c, 0x44, 0xe2, 0xc0, 0x02, 0xf3, 0xb3, 0x07, 0xd9, 0x1c, 0x0e, 0x9a, 0x77,
	0x34, 0x06, 0xf3, 0x4b, 0x21, 0x16, 0x98, 0xff, 0x7f, 0xff, 0x17, 0x15, 0xf1, 0x74, 0xed, 0xb9,
	0xc4, 0xaf, 0xa0, 0xf1, 0x63, 0xe4, 0xf1, 0xe4, 0x2d, 0x41, 0x3f, 0x84, 0x3b, 0xa5, 0xe5, 0xe7,
	0x72, 0x3f, 0x82, 0xed, 0x43, 0x1a, 0x50, 0x49, 0xaf, 0x03, 0xdb, 0x7e, 0x00, 0x8d, 0xb2, 0x6c,
	0x73, 0x29, 0x1a, 0x80, 0x8f, 0x0a, 0xcf, 0x7c, 0xd4, 0x7a, 0xf6, 0x13, 0xd8, 0x2e, 0x89, 0x65,
	0x29, 0x77, 0xa0, 0x16, 0x8f, 0xc4, 0xac, 0xbd, 0xeb, 0xc5, 0xf6, 0xd6, 0x0c, 0x63, 0x9b, 0xfd,
	0x2d, 0x6c, 0x1d, 0x5d, 0x53, 0x73, 0xd9, 0x8f, 0xa6, 0xc1, 0x2f, 0xd9, 0xee, 0xc3, 0xf2, 0xa8,
	0x68, 0x36, 0x38, 0xca, 0xd1, 0x2e, 0x5d, 0x9d, 0x9f, 0x5e, 0x9f, 0x9b, 0x37, 0xde, 0x9c, 0x9b,
	0xc6, 0x9f, 0x17, 0xa6, 0xf1, 0xfa, 0xc2, 0x34, 0xfe, 0xba, 0x30, 0x8d, 0x37, 0x17, 0xa6, 0xf1,
	0xc7, 0x3f, 0xe6, 0x8d, 0x9f, 0xf7, 0x7a, 0x4c, 0x9e, 0x25, 0x5e, 0xbb, 0xcb, 0x43, 0xe7, 0x97,
	0xc4, 0xa3, 0x6a, 0x40, 0x88, 0xf1, 0xd5, 0xbd, 0x33, 0x12, 0x04, 0x4e, 0xf9, 0x87, 0xa8, 0x57,
	0xd5, 0x9f, 0x8e, 0x9f, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xcd, 0x8c, 0xe1, 0xa9, 0x0a,
	0x00, 0x00,
}

func (this *AddGameRoomRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AddGameRoomRequest)
	if !ok {
		that2, ok := that.(AddGameRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AddGameRoomRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AddGameRoomRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AddGameRoomRequest but is not nil && this == nil")
	}
	if this.RoomID != that1.RoomID {
		return fmt.Errorf("RoomID this(%v) Not Equal that(%v)", this.RoomID, that1.RoomID)
	}
	if this.GameID != that1.GameID {
		return fmt.Errorf("GameID this(%v) Not Equal that(%v)", this.GameID, that1.GameID)
	}
	if this.Level != that1.Level {
		return fmt.Errorf("Level this(%v) Not Equal that(%v)", this.Level, that1.Level)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Rate != that1.Rate {
		return fmt.Errorf("Rate this(%v) Not Equal that(%v)", this.Rate, that1.Rate)
	}
	if this.EntranceRestrictions != that1.EntranceRestrictions {
		return fmt.Errorf("EntranceRestrictions this(%v) Not Equal that(%v)", this.EntranceRestrictions, that1.EntranceRestrictions)
	}
	if this.BottomNote != that1.BottomNote {
		return fmt.Errorf("BottomNote this(%v) Not Equal that(%v)", this.BottomNote, that1.BottomNote)
	}
	if this.AdviceConfig != that1.AdviceConfig {
		return fmt.Errorf("AdviceConfig this(%v) Not Equal that(%v)", this.AdviceConfig, that1.AdviceConfig)
	}
	if this.PointStatus != that1.PointStatus {
		return fmt.Errorf("PointStatus this(%v) Not Equal that(%v)", this.PointStatus, that1.PointStatus)
	}
	if this.MaxPeople != that1.MaxPeople {
		return fmt.Errorf("MaxPeople this(%v) Not Equal that(%v)", this.MaxPeople, that1.MaxPeople)
	}
	if this.MinPeople != that1.MinPeople {
		return fmt.Errorf("MinPeople this(%v) Not Equal that(%v)", this.MinPeople, that1.MinPeople)
	}
	if this.IsAllowClose != that1.IsAllowClose {
		return fmt.Errorf("IsAllowClose this(%v) Not Equal that(%v)", this.IsAllowClose, that1.IsAllowClose)
	}
	if this.IsOpenAiRobot != that1.IsOpenAiRobot {
		return fmt.Errorf("IsOpenAiRobot this(%v) Not Equal that(%v)", this.IsOpenAiRobot, that1.IsOpenAiRobot)
	}
	if this.IsOpenCrossPlatformMatch != that1.IsOpenCrossPlatformMatch {
		return fmt.Errorf("IsOpenCrossPlatformMatch this(%v) Not Equal that(%v)", this.IsOpenCrossPlatformMatch, that1.IsOpenCrossPlatformMatch)
	}
	if len(this.AllowPlatformID) != len(that1.AllowPlatformID) {
		return fmt.Errorf("AllowPlatformID this(%v) Not Equal that(%v)", len(this.AllowPlatformID), len(that1.AllowPlatformID))
	}
	for i := range this.AllowPlatformID {
		if this.AllowPlatformID[i] != that1.AllowPlatformID[i] {
			return fmt.Errorf("AllowPlatformID this[%v](%v) Not Equal that[%v](%v)", i, this.AllowPlatformID[i], i, that1.AllowPlatformID[i])
		}
	}
	if this.IsAllowAutoCreateTable != that1.IsAllowAutoCreateTable {
		return fmt.Errorf("IsAllowAutoCreateTable this(%v) Not Equal that(%v)", this.IsAllowAutoCreateTable, that1.IsAllowAutoCreateTable)
	}
	if len(this.Robot) != len(that1.Robot) {
		return fmt.Errorf("Robot this(%v) Not Equal that(%v)", len(this.Robot), len(that1.Robot))
	}
	for i := range this.Robot {
		if !this.Robot[i].Equal(that1.Robot[i]) {
			return fmt.Errorf("Robot this[%v](%v) Not Equal that[%v](%v)", i, this.Robot[i], i, that1.Robot[i])
		}
	}
	if this.RobotMaxBalance != that1.RobotMaxBalance {
		return fmt.Errorf("RobotMaxBalance this(%v) Not Equal that(%v)", this.RobotMaxBalance, that1.RobotMaxBalance)
	}
	if this.RobotMinBalance != that1.RobotMinBalance {
		return fmt.Errorf("RobotMinBalance this(%v) Not Equal that(%v)", this.RobotMinBalance, that1.RobotMinBalance)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AddGameRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddGameRoomRequest)
	if !ok {
		that2, ok := that.(AddGameRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if this.GameID != that1.GameID {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.EntranceRestrictions != that1.EntranceRestrictions {
		return false
	}
	if this.BottomNote != that1.BottomNote {
		return false
	}
	if this.AdviceConfig != that1.AdviceConfig {
		return false
	}
	if this.PointStatus != that1.PointStatus {
		return false
	}
	if this.MaxPeople != that1.MaxPeople {
		return false
	}
	if this.MinPeople != that1.MinPeople {
		return false
	}
	if this.IsAllowClose != that1.IsAllowClose {
		return false
	}
	if this.IsOpenAiRobot != that1.IsOpenAiRobot {
		return false
	}
	if this.IsOpenCrossPlatformMatch != that1.IsOpenCrossPlatformMatch {
		return false
	}
	if len(this.AllowPlatformID) != len(that1.AllowPlatformID) {
		return false
	}
	for i := range this.AllowPlatformID {
		if this.AllowPlatformID[i] != that1.AllowPlatformID[i] {
			return false
		}
	}
	if this.IsAllowAutoCreateTable != that1.IsAllowAutoCreateTable {
		return false
	}
	if len(this.Robot) != len(that1.Robot) {
		return false
	}
	for i := range this.Robot {
		if !this.Robot[i].Equal(that1.Robot[i]) {
			return false
		}
	}
	if this.RobotMaxBalance != that1.RobotMaxBalance {
		return false
	}
	if this.RobotMinBalance != that1.RobotMinBalance {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AddGameRoomResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AddGameRoomResponse)
	if !ok {
		that2, ok := that.(AddGameRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AddGameRoomResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AddGameRoomResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AddGameRoomResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AddGameRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddGameRoomResponse)
	if !ok {
		that2, ok := that.(AddGameRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AddGameRoomsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AddGameRoomsRequest)
	if !ok {
		that2, ok := that.(AddGameRoomsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AddGameRoomsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AddGameRoomsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AddGameRoomsRequest but is not nil && this == nil")
	}
	if len(this.Rooms) != len(that1.Rooms) {
		return fmt.Errorf("Rooms this(%v) Not Equal that(%v)", len(this.Rooms), len(that1.Rooms))
	}
	for i := range this.Rooms {
		if !this.Rooms[i].Equal(that1.Rooms[i]) {
			return fmt.Errorf("Rooms this[%v](%v) Not Equal that[%v](%v)", i, this.Rooms[i], i, that1.Rooms[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AddGameRoomsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddGameRoomsRequest)
	if !ok {
		that2, ok := that.(AddGameRoomsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rooms) != len(that1.Rooms) {
		return false
	}
	for i := range this.Rooms {
		if !this.Rooms[i].Equal(that1.Rooms[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AddGameRoomsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AddGameRoomsResponse)
	if !ok {
		that2, ok := that.(AddGameRoomsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AddGameRoomsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AddGameRoomsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AddGameRoomsResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AddGameRoomsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddGameRoomsResponse)
	if !ok {
		that2, ok := that.(AddGameRoomsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OpenGameRoomRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OpenGameRoomRequest)
	if !ok {
		that2, ok := that.(OpenGameRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OpenGameRoomRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OpenGameRoomRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OpenGameRoomRequest but is not nil && this == nil")
	}
	if this.RoomID != that1.RoomID {
		return fmt.Errorf("RoomID this(%v) Not Equal that(%v)", this.RoomID, that1.RoomID)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OpenGameRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenGameRoomRequest)
	if !ok {
		that2, ok := that.(OpenGameRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OpenGameRoomResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OpenGameRoomResponse)
	if !ok {
		that2, ok := that.(OpenGameRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OpenGameRoomResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OpenGameRoomResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OpenGameRoomResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OpenGameRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenGameRoomResponse)
	if !ok {
		that2, ok := that.(OpenGameRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CloseGameRoomRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CloseGameRoomRequest)
	if !ok {
		that2, ok := that.(CloseGameRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CloseGameRoomRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CloseGameRoomRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CloseGameRoomRequest but is not nil && this == nil")
	}
	if this.RoomID != that1.RoomID {
		return fmt.Errorf("RoomID this(%v) Not Equal that(%v)", this.RoomID, that1.RoomID)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CloseGameRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloseGameRoomRequest)
	if !ok {
		that2, ok := that.(CloseGameRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CloseGameRoomResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CloseGameRoomResponse)
	if !ok {
		that2, ok := that.(CloseGameRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CloseGameRoomResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CloseGameRoomResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CloseGameRoomResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CloseGameRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloseGameRoomResponse)
	if !ok {
		that2, ok := that.(CloseGameRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FindGameRoomRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FindGameRoomRequest)
	if !ok {
		that2, ok := that.(FindGameRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FindGameRoomRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FindGameRoomRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FindGameRoomRequest but is not nil && this == nil")
	}
	if this.RoomID != that1.RoomID {
		return fmt.Errorf("RoomID this(%v) Not Equal that(%v)", this.RoomID, that1.RoomID)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FindGameRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindGameRoomRequest)
	if !ok {
		that2, ok := that.(FindGameRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FindGameRoomResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FindGameRoomResponse)
	if !ok {
		that2, ok := that.(FindGameRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FindGameRoomResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FindGameRoomResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FindGameRoomResponse but is not nil && this == nil")
	}
	if !this.Room.Equal(that1.Room) {
		return fmt.Errorf("Room this(%v) Not Equal that(%v)", this.Room, that1.Room)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FindGameRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindGameRoomResponse)
	if !ok {
		that2, ok := that.(FindGameRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FindGameRoomsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FindGameRoomsRequest)
	if !ok {
		that2, ok := that.(FindGameRoomsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FindGameRoomsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FindGameRoomsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FindGameRoomsRequest but is not nil && this == nil")
	}
	if this.GameID != that1.GameID {
		return fmt.Errorf("GameID this(%v) Not Equal that(%v)", this.GameID, that1.GameID)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FindGameRoomsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindGameRoomsRequest)
	if !ok {
		that2, ok := that.(FindGameRoomsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GameID != that1.GameID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FindGameRoomsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FindGameRoomsResponse)
	if !ok {
		that2, ok := that.(FindGameRoomsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FindGameRoomsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FindGameRoomsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FindGameRoomsResponse but is not nil && this == nil")
	}
	if len(this.Rooms) != len(that1.Rooms) {
		return fmt.Errorf("Rooms this(%v) Not Equal that(%v)", len(this.Rooms), len(that1.Rooms))
	}
	for i := range this.Rooms {
		if !this.Rooms[i].Equal(that1.Rooms[i]) {
			return fmt.Errorf("Rooms this[%v](%v) Not Equal that[%v](%v)", i, this.Rooms[i], i, that1.Rooms[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FindGameRoomsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindGameRoomsResponse)
	if !ok {
		that2, ok := that.(FindGameRoomsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rooms) != len(that1.Rooms) {
		return false
	}
	for i := range this.Rooms {
		if !this.Rooms[i].Equal(that1.Rooms[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AddGameRoomPoolsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AddGameRoomPoolsRequest)
	if !ok {
		that2, ok := that.(AddGameRoomPoolsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AddGameRoomPoolsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AddGameRoomPoolsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AddGameRoomPoolsRequest but is not nil && this == nil")
	}
	if len(this.Names) != len(that1.Names) {
		return fmt.Errorf("Names this(%v) Not Equal that(%v)", len(this.Names), len(that1.Names))
	}
	for i := range this.Names {
		if this.Names[i] != that1.Names[i] {
			return fmt.Errorf("Names this[%v](%v) Not Equal that[%v](%v)", i, this.Names[i], i, that1.Names[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AddGameRoomPoolsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddGameRoomPoolsRequest)
	if !ok {
		that2, ok := that.(AddGameRoomPoolsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Names) != len(that1.Names) {
		return false
	}
	for i := range this.Names {
		if this.Names[i] != that1.Names[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AddGameRoomPoolsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AddGameRoomPoolsResponse)
	if !ok {
		that2, ok := that.(AddGameRoomPoolsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AddGameRoomPoolsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AddGameRoomPoolsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AddGameRoomPoolsResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AddGameRoomPoolsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddGameRoomPoolsResponse)
	if !ok {
		that2, ok := that.(AddGameRoomPoolsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BindGameRoomPoolRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BindGameRoomPoolRequest)
	if !ok {
		that2, ok := that.(BindGameRoomPoolRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BindGameRoomPoolRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BindGameRoomPoolRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BindGameRoomPoolRequest but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.RoomID != that1.RoomID {
		return fmt.Errorf("RoomID this(%v) Not Equal that(%v)", this.RoomID, that1.RoomID)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BindGameRoomPoolRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BindGameRoomPoolRequest)
	if !ok {
		that2, ok := that.(BindGameRoomPoolRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BindGameRoomPoolResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BindGameRoomPoolResponse)
	if !ok {
		that2, ok := that.(BindGameRoomPoolResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BindGameRoomPoolResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BindGameRoomPoolResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BindGameRoomPoolResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BindGameRoomPoolResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BindGameRoomPoolResponse)
	if !ok {
		that2, ok := that.(BindGameRoomPoolResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UnboundGameRoomPoolRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UnboundGameRoomPoolRequest)
	if !ok {
		that2, ok := that.(UnboundGameRoomPoolRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UnboundGameRoomPoolRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UnboundGameRoomPoolRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UnboundGameRoomPoolRequest but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.RoomID != that1.RoomID {
		return fmt.Errorf("RoomID this(%v) Not Equal that(%v)", this.RoomID, that1.RoomID)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UnboundGameRoomPoolRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnboundGameRoomPoolRequest)
	if !ok {
		that2, ok := that.(UnboundGameRoomPoolRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UnboundGameRoomPoolResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UnboundGameRoomPoolResponse)
	if !ok {
		that2, ok := that.(UnboundGameRoomPoolResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UnboundGameRoomPoolResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UnboundGameRoomPoolResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UnboundGameRoomPoolResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UnboundGameRoomPoolResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnboundGameRoomPoolResponse)
	if !ok {
		that2, ok := that.(UnboundGameRoomPoolResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteGameRoomPoolRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteGameRoomPoolRequest)
	if !ok {
		that2, ok := that.(DeleteGameRoomPoolRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteGameRoomPoolRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteGameRoomPoolRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteGameRoomPoolRequest but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DeleteGameRoomPoolRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteGameRoomPoolRequest)
	if !ok {
		that2, ok := that.(DeleteGameRoomPoolRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteGameRoomPoolResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteGameRoomPoolResponse)
	if !ok {
		that2, ok := that.(DeleteGameRoomPoolResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteGameRoomPoolResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteGameRoomPoolResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteGameRoomPoolResponse but is not nil && this == nil")
	}
	if this.Success != that1.Success {
		return fmt.Errorf("Success this(%v) Not Equal that(%v)", this.Success, that1.Success)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DeleteGameRoomPoolResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteGameRoomPoolResponse)
	if !ok {
		that2, ok := that.(DeleteGameRoomPoolResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FindGameRoomPoolsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FindGameRoomPoolsRequest)
	if !ok {
		that2, ok := that.(FindGameRoomPoolsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FindGameRoomPoolsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FindGameRoomPoolsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FindGameRoomPoolsRequest but is not nil && this == nil")
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FindGameRoomPoolsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindGameRoomPoolsRequest)
	if !ok {
		that2, ok := that.(FindGameRoomPoolsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FindGameRoomPoolsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FindGameRoomPoolsResponse)
	if !ok {
		that2, ok := that.(FindGameRoomPoolsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FindGameRoomPoolsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FindGameRoomPoolsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FindGameRoomPoolsResponse but is not nil && this == nil")
	}
	if len(this.RoomPools) != len(that1.RoomPools) {
		return fmt.Errorf("RoomPools this(%v) Not Equal that(%v)", len(this.RoomPools), len(that1.RoomPools))
	}
	for i := range this.RoomPools {
		if !this.RoomPools[i].Equal(that1.RoomPools[i]) {
			return fmt.Errorf("RoomPools this[%v](%v) Not Equal that[%v](%v)", i, this.RoomPools[i], i, that1.RoomPools[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FindGameRoomPoolsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindGameRoomPoolsResponse)
	if !ok {
		that2, ok := that.(FindGameRoomPoolsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RoomPools) != len(that1.RoomPools) {
		return false
	}
	for i := range this.RoomPools {
		if !this.RoomPools[i].Equal(that1.RoomPools[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FindGameRoomPoolRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FindGameRoomPoolRequest)
	if !ok {
		that2, ok := that.(FindGameRoomPoolRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FindGameRoomPoolRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FindGameRoomPoolRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FindGameRoomPoolRequest but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FindGameRoomPoolRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindGameRoomPoolRequest)
	if !ok {
		that2, ok := that.(FindGameRoomPoolRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FindGameRoomPoolResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FindGameRoomPoolResponse)
	if !ok {
		that2, ok := that.(FindGameRoomPoolResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FindGameRoomPoolResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FindGameRoomPoolResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FindGameRoomPoolResponse but is not nil && this == nil")
	}
	if !this.RoomPool.Equal(that1.RoomPool) {
		return fmt.Errorf("RoomPool this(%v) Not Equal that(%v)", this.RoomPool, that1.RoomPool)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FindGameRoomPoolResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindGameRoomPoolResponse)
	if !ok {
		that2, ok := that.(FindGameRoomPoolResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoomPool.Equal(that1.RoomPool) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *AddGameRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddGameRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddGameRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RobotMinBalance != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RobotMinBalance))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.RobotMaxBalance != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RobotMaxBalance))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Robot) > 0 {
		for iNdEx := len(m.Robot) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Robot[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.IsAllowAutoCreateTable {
		i--
		if m.IsAllowAutoCreateTable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.AllowPlatformID) > 0 {
		dAtA2 := make([]byte, len(m.AllowPlatformID)*10)
		var j1 int
		for _, num := range m.AllowPlatformID {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.IsOpenCrossPlatformMatch {
		i--
		if m.IsOpenCrossPlatformMatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.IsOpenAiRobot {
		i--
		if m.IsOpenAiRobot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.IsAllowClose {
		i--
		if m.IsAllowClose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.MinPeople != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinPeople))
		i--
		dAtA[i] = 0x60
	}
	if m.MaxPeople != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxPeople))
		i--
		dAtA[i] = 0x58
	}
	if m.PointStatus != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PointStatus))
		i--
		dAtA[i] = 0x50
	}
	if len(m.AdviceConfig) > 0 {
		i -= len(m.AdviceConfig)
		copy(dAtA[i:], m.AdviceConfig)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AdviceConfig)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BottomNote != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BottomNote))
		i--
		dAtA[i] = 0x40
	}
	if m.EntranceRestrictions != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EntranceRestrictions))
		i--
		dAtA[i] = 0x38
	}
	if m.Rate != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Rate))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Level != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if m.GameID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x18
	}
	if m.RoomID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *AddGameRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddGameRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddGameRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddGameRoomsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddGameRoomsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddGameRoomsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rooms) > 0 {
		for iNdEx := len(m.Rooms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rooms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddGameRoomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddGameRoomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddGameRoomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OpenGameRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenGameRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenGameRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoomID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OpenGameRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenGameRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenGameRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CloseGameRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseGameRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseGameRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoomID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CloseGameRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseGameRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseGameRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FindGameRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindGameRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindGameRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoomID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FindGameRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindGameRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindGameRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindGameRoomsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindGameRoomsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindGameRoomsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FindGameRoomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindGameRoomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindGameRoomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rooms) > 0 {
		for iNdEx := len(m.Rooms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rooms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddGameRoomPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddGameRoomPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddGameRoomPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddGameRoomPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddGameRoomPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddGameRoomPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BindGameRoomPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindGameRoomPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindGameRoomPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoomID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BindGameRoomPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindGameRoomPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindGameRoomPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnboundGameRoomPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnboundGameRoomPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnboundGameRoomPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoomID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnboundGameRoomPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnboundGameRoomPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnboundGameRoomPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteGameRoomPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGameRoomPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteGameRoomPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteGameRoomPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGameRoomPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteGameRoomPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FindGameRoomPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindGameRoomPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindGameRoomPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *FindGameRoomPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindGameRoomPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindGameRoomPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RoomPools) > 0 {
		for iNdEx := len(m.RoomPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoomPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FindGameRoomPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindGameRoomPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindGameRoomPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FindGameRoomPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindGameRoomPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindGameRoomPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoomPool != nil {
		{
			size, err := m.RoomPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddGameRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomID != 0 {
		n += 1 + sovTypes(uint64(m.RoomID))
	}
	if m.GameID != 0 {
		n += 1 + sovTypes(uint64(m.GameID))
	}
	if m.Level != 0 {
		n += 1 + sovTypes(uint64(m.Level))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Rate != 0 {
		n += 1 + sovTypes(uint64(m.Rate))
	}
	if m.EntranceRestrictions != 0 {
		n += 1 + sovTypes(uint64(m.EntranceRestrictions))
	}
	if m.BottomNote != 0 {
		n += 1 + sovTypes(uint64(m.BottomNote))
	}
	l = len(m.AdviceConfig)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PointStatus != 0 {
		n += 1 + sovTypes(uint64(m.PointStatus))
	}
	if m.MaxPeople != 0 {
		n += 1 + sovTypes(uint64(m.MaxPeople))
	}
	if m.MinPeople != 0 {
		n += 1 + sovTypes(uint64(m.MinPeople))
	}
	if m.IsAllowClose {
		n += 2
	}
	if m.IsOpenAiRobot {
		n += 2
	}
	if m.IsOpenCrossPlatformMatch {
		n += 2
	}
	if len(m.AllowPlatformID) > 0 {
		l = 0
		for _, e := range m.AllowPlatformID {
			l += sovTypes(uint64(e))
		}
		n += 2 + sovTypes(uint64(l)) + l
	}
	if m.IsAllowAutoCreateTable {
		n += 3
	}
	if len(m.Robot) > 0 {
		for _, e := range m.Robot {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.RobotMaxBalance != 0 {
		n += 2 + sovTypes(uint64(m.RobotMaxBalance))
	}
	if m.RobotMinBalance != 0 {
		n += 2 + sovTypes(uint64(m.RobotMinBalance))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddGameRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddGameRoomsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddGameRoomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OpenGameRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomID != 0 {
		n += 1 + sovTypes(uint64(m.RoomID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OpenGameRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloseGameRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomID != 0 {
		n += 1 + sovTypes(uint64(m.RoomID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloseGameRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindGameRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomID != 0 {
		n += 1 + sovTypes(uint64(m.RoomID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindGameRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindGameRoomsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovTypes(uint64(m.GameID))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindGameRoomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddGameRoomPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddGameRoomPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BindGameRoomPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.RoomID != 0 {
		n += 1 + sovTypes(uint64(m.RoomID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BindGameRoomPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnboundGameRoomPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.RoomID != 0 {
		n += 1 + sovTypes(uint64(m.RoomID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnboundGameRoomPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteGameRoomPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteGameRoomPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindGameRoomPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindGameRoomPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoomPools) > 0 {
		for _, e := range m.RoomPools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindGameRoomPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindGameRoomPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomPool != nil {
		l = m.RoomPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddGameRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddGameRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddGameRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntranceRestrictions", wireType)
			}
			m.EntranceRestrictions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntranceRestrictions |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomNote", wireType)
			}
			m.BottomNote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BottomNote |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdviceConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdviceConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointStatus", wireType)
			}
			m.PointStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPeople", wireType)
			}
			m.MaxPeople = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPeople |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPeople", wireType)
			}
			m.MinPeople = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPeople |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllowClose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAllowClose = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenAiRobot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpenAiRobot = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenCrossPlatformMatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpenCrossPlatformMatch = bool(v != 0)
		case 16:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllowPlatformID = append(m.AllowPlatformID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AllowPlatformID) == 0 {
					m.AllowPlatformID = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllowPlatformID = append(m.AllowPlatformID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowPlatformID", wireType)
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllowAutoCreateTable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAllowAutoCreateTable = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Robot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Robot = append(m.Robot, &room.RobotConfig{})
			if err := m.Robot[len(m.Robot)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotMaxBalance", wireType)
			}
			m.RobotMaxBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobotMaxBalance |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotMinBalance", wireType)
			}
			m.RobotMinBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobotMinBalance |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddGameRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddGameRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddGameRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddGameRoomsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddGameRoomsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddGameRoomsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, &AddGameRoomRequest{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddGameRoomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddGameRoomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddGameRoomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenGameRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenGameRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenGameRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenGameRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenGameRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenGameRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseGameRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseGameRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseGameRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseGameRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseGameRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseGameRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindGameRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindGameRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindGameRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindGameRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindGameRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindGameRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &room.Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindGameRoomsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindGameRoomsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindGameRoomsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindGameRoomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindGameRoomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindGameRoomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, &room.Room{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddGameRoomPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddGameRoomPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddGameRoomPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddGameRoomPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddGameRoomPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddGameRoomPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindGameRoomPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindGameRoomPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindGameRoomPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindGameRoomPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindGameRoomPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindGameRoomPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnboundGameRoomPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnboundGameRoomPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnboundGameRoomPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnboundGameRoomPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnboundGameRoomPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnboundGameRoomPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGameRoomPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGameRoomPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGameRoomPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGameRoomPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGameRoomPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGameRoomPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindGameRoomPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindGameRoomPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindGameRoomPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindGameRoomPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindGameRoomPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindGameRoomPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomPools = append(m.RoomPools, &room.RoomPool{})
			if err := m.RoomPools[len(m.RoomPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindGameRoomPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindGameRoomPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindGameRoomPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindGameRoomPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindGameRoomPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindGameRoomPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomPool == nil {
				m.RoomPool = &room.RoomPool{}
			}
			if err := m.RoomPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
