// code generated by github.com/kubegames/protoc-gen-gin. DO NOT EDIT.

package room

//RoomService
//room_service.RoomService
////游戏房间服务

import (
	"context"
	"fmt"
	"github.com/gin-gonic/gin"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	types "github.com/kubegames/kubegames-hall/app/service/room/types"
)

func NewRoomServiceError(code int, format string, a ...interface{}) error {
	return status.Error(codes.Code(code), fmt.Sprintf(format, a...))
}

type RoomServiceHTTPServer interface {
	AddGameRoom(ctx context.Context, request *types.AddGameRoomRequest) (response *types.AddGameRoomResponse, err error)

	AddGameRoomPools(ctx context.Context, request *types.AddGameRoomPoolsRequest) (response *types.AddGameRoomPoolsResponse, err error)

	AddGameRooms(ctx context.Context, request *types.AddGameRoomsRequest) (response *types.AddGameRoomsResponse, err error)

	BindGameRoomPool(ctx context.Context, request *types.BindGameRoomPoolRequest) (response *types.BindGameRoomPoolResponse, err error)

	CloseGameRoom(ctx context.Context, request *types.CloseGameRoomRequest) (response *types.CloseGameRoomResponse, err error)

	DeleteGameRoomPool(ctx context.Context, request *types.DeleteGameRoomPoolRequest) (response *types.DeleteGameRoomPoolResponse, err error)

	FindGameRoom(ctx context.Context, request *types.FindGameRoomRequest) (response *types.FindGameRoomResponse, err error)

	FindGameRoomPool(ctx context.Context, request *types.FindGameRoomPoolRequest) (response *types.FindGameRoomPoolResponse, err error)

	FindGameRoomPools(ctx context.Context, request *types.FindGameRoomPoolsRequest) (response *types.FindGameRoomPoolsResponse, err error)

	FindGameRooms(ctx context.Context, request *types.FindGameRoomsRequest) (response *types.FindGameRoomsResponse, err error)

	OpenGameRoom(ctx context.Context, request *types.OpenGameRoomRequest) (response *types.OpenGameRoomResponse, err error)

	UnboundGameRoomPool(ctx context.Context, request *types.UnboundGameRoomPoolRequest) (response *types.UnboundGameRoomPoolResponse, err error)
}

func RegisterRoomServiceHTTPServer(r gin.IRouter, srv RoomServiceHTTPServer) {
	//init router
	s := _RoomService{
		server: srv,
		router: r,
	}
	s._RegisterService()
}

type _RoomService struct {
	server RoomServiceHTTPServer
	router gin.IRouter
}

func (s *_RoomService) AddGameRoom_0(ctx *gin.Context) {
	var in types.AddGameRoomRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(RoomServiceHTTPServer).AddGameRoom(newCtx, &in)
	if err != nil {
		_RoomServiceError(ctx, err)
		return
	}

	_RoomServiceSuccess(ctx, out)
}

func (s *_RoomService) AddGameRooms_0(ctx *gin.Context) {
	var in types.AddGameRoomsRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(RoomServiceHTTPServer).AddGameRooms(newCtx, &in)
	if err != nil {
		_RoomServiceError(ctx, err)
		return
	}

	_RoomServiceSuccess(ctx, out)
}

func (s *_RoomService) OpenGameRoom_0(ctx *gin.Context) {
	var in types.OpenGameRoomRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(RoomServiceHTTPServer).OpenGameRoom(newCtx, &in)
	if err != nil {
		_RoomServiceError(ctx, err)
		return
	}

	_RoomServiceSuccess(ctx, out)
}

func (s *_RoomService) CloseGameRoom_0(ctx *gin.Context) {
	var in types.CloseGameRoomRequest

	if err := ctx.ShouldBindUri(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindQuery(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(RoomServiceHTTPServer).CloseGameRoom(newCtx, &in)
	if err != nil {
		_RoomServiceError(ctx, err)
		return
	}

	_RoomServiceSuccess(ctx, out)
}

func (s *_RoomService) FindGameRooms_0(ctx *gin.Context) {
	var in types.FindGameRoomsRequest

	if err := ctx.ShouldBindUri(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindQuery(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(RoomServiceHTTPServer).FindGameRooms(newCtx, &in)
	if err != nil {
		_RoomServiceError(ctx, err)
		return
	}

	_RoomServiceSuccess(ctx, out)
}

func (s *_RoomService) FindGameRoom_0(ctx *gin.Context) {
	var in types.FindGameRoomRequest

	if err := ctx.ShouldBindUri(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindQuery(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(RoomServiceHTTPServer).FindGameRoom(newCtx, &in)
	if err != nil {
		_RoomServiceError(ctx, err)
		return
	}

	_RoomServiceSuccess(ctx, out)
}

func (s *_RoomService) AddGameRoomPools_0(ctx *gin.Context) {
	var in types.AddGameRoomPoolsRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(RoomServiceHTTPServer).AddGameRoomPools(newCtx, &in)
	if err != nil {
		_RoomServiceError(ctx, err)
		return
	}

	_RoomServiceSuccess(ctx, out)
}

func (s *_RoomService) BindGameRoomPool_0(ctx *gin.Context) {
	var in types.BindGameRoomPoolRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(RoomServiceHTTPServer).BindGameRoomPool(newCtx, &in)
	if err != nil {
		_RoomServiceError(ctx, err)
		return
	}

	_RoomServiceSuccess(ctx, out)
}

func (s *_RoomService) UnboundGameRoomPool_0(ctx *gin.Context) {
	var in types.UnboundGameRoomPoolRequest

	if err := ctx.ShouldBindJSON(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(RoomServiceHTTPServer).UnboundGameRoomPool(newCtx, &in)
	if err != nil {
		_RoomServiceError(ctx, err)
		return
	}

	_RoomServiceSuccess(ctx, out)
}

func (s *_RoomService) DeleteGameRoomPool_0(ctx *gin.Context) {
	var in types.DeleteGameRoomPoolRequest

	if err := ctx.ShouldBindUri(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindQuery(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(RoomServiceHTTPServer).DeleteGameRoomPool(newCtx, &in)
	if err != nil {
		_RoomServiceError(ctx, err)
		return
	}

	_RoomServiceSuccess(ctx, out)
}

func (s *_RoomService) FindGameRoomPools_0(ctx *gin.Context) {
	var in types.FindGameRoomPoolsRequest

	if err := ctx.ShouldBindQuery(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(RoomServiceHTTPServer).FindGameRoomPools(newCtx, &in)
	if err != nil {
		_RoomServiceError(ctx, err)
		return
	}

	_RoomServiceSuccess(ctx, out)
}

func (s *_RoomService) FindGameRoomPool_0(ctx *gin.Context) {
	var in types.FindGameRoomPoolRequest

	if err := ctx.ShouldBindUri(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindQuery(&in); err != nil {
		_RoomServiceParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(RoomServiceHTTPServer).FindGameRoomPool(newCtx, &in)
	if err != nil {
		_RoomServiceError(ctx, err)
		return
	}

	_RoomServiceSuccess(ctx, out)
}

func (s *_RoomService) _RegisterService() {

	s.router.Handle("POST", "/room/v1/add", s.AddGameRoom_0)

	s.router.Handle("POST", "/room/v1/adds", s.AddGameRooms_0)

	s.router.Handle("POST", "/room/v1/open", s.OpenGameRoom_0)

	s.router.Handle("DELETE", "/room/v1/close/:roomID", s.CloseGameRoom_0)

	s.router.Handle("GET", "/room/v1/finds/:gameID/:status", s.FindGameRooms_0)

	s.router.Handle("GET", "/room/v1/find/:roomID", s.FindGameRoom_0)

	s.router.Handle("POST", "/room/pool/v1/adds", s.AddGameRoomPools_0)

	s.router.Handle("POST", "/room/pool/v1/bind", s.BindGameRoomPool_0)

	s.router.Handle("POST", "/room/pool/v1/unbound", s.UnboundGameRoomPool_0)

	s.router.Handle("DELETE", "/room/pool/v1/:id", s.DeleteGameRoomPool_0)

	s.router.Handle("GET", "/room/pool/v1/finds", s.FindGameRoomPools_0)

	s.router.Handle("GET", "/room/pool/v1/find/:id", s.FindGameRoomPool_0)

}

func _RoomServiceError(ctx *gin.Context, err error) {
	code := 500

	msg := "unknow error"
	if err == nil {
		msg += ", err is nil"
		ctx.JSON(code, map[string]interface{}{
			"code": code,
			"msg":  msg,
			"data": nil,
		})
		return
	}

	if c, ok := status.FromError(err); ok {
		code = int(c.Code())
		msg = c.Message()
	}

	//_ = ctx.Error(err)

	ctx.JSON(code, map[string]interface{}{
		"code": code,
		"msg":  msg,
		"data": nil,
	})
}

func _RoomServiceParamsError(ctx *gin.Context, err error) {
	ctx.JSON(400, map[string]interface{}{
		"code": 400,
		"msg":  err.Error(),
		"data": nil,
	})
}

func _RoomServiceSuccess(ctx *gin.Context, data interface{}) {
	ctx.JSON(200, map[string]interface{}{
		"code": 200,
		"msg":  "success",
		"data": data,
	})
}
